
STM32F4_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f0  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08002278  08002278  0000a278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800227c  0800227c  0000a27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000024  20000000  08002280  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000c97c  20000028  20000028  00010028  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  2000c9a4  2000c9a4  00010028  2**0
                  ALLOC
  7 .ARM.attributes 0000002d  00000000  00000000  00010024  2**0
                  CONTENTS, READONLY
  8 .debug_abbrev 0000476c  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015179  00000000  00000000  000147bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a018  00000000  00000000  00029936  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b95c  00000000  00000000  0003394e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000040c2  00000000  00000000  0003f2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001f1d  00000000  00000000  0004336c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a78  00000000  00000000  00045290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a0  00000000  00000000  00046d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000081a9  00000000  00000000  000486a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000002a  00000000  00000000  00050851  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003970  00000000  00000000  0005087c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	f240 0328 	movw	r3, #40	; 0x28
 800018c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000190:	781a      	ldrb	r2, [r3, #0]
 8000192:	b90a      	cbnz	r2, 8000198 <__do_global_dtors_aux+0x10>
 8000194:	2001      	movs	r0, #1
 8000196:	7018      	strb	r0, [r3, #0]
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop

0800019c <frame_dummy>:
 800019c:	f240 0024 	movw	r0, #36	; 0x24
 80001a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001a4:	b508      	push	{r3, lr}
 80001a6:	6803      	ldr	r3, [r0, #0]
 80001a8:	b12b      	cbz	r3, 80001b6 <frame_dummy+0x1a>
 80001aa:	f240 0300 	movw	r3, #0
 80001ae:	f2c0 0300 	movt	r3, #0
 80001b2:	b103      	cbz	r3, 80001b6 <frame_dummy+0x1a>
 80001b4:	4798      	blx	r3
 80001b6:	bd08      	pop	{r3, pc}

080001b8 <__libc_init_array>:
 80001b8:	b570      	push	{r4, r5, r6, lr}
 80001ba:	f242 2678 	movw	r6, #8824	; 0x2278
 80001be:	f242 2578 	movw	r5, #8824	; 0x2278
 80001c2:	f6c0 0600 	movt	r6, #2048	; 0x800
 80001c6:	f6c0 0500 	movt	r5, #2048	; 0x800
 80001ca:	1b76      	subs	r6, r6, r5
 80001cc:	10b6      	asrs	r6, r6, #2
 80001ce:	d006      	beq.n	80001de <__libc_init_array+0x26>
 80001d0:	2400      	movs	r4, #0
 80001d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80001d6:	3401      	adds	r4, #1
 80001d8:	4798      	blx	r3
 80001da:	42a6      	cmp	r6, r4
 80001dc:	d1f9      	bne.n	80001d2 <__libc_init_array+0x1a>
 80001de:	f242 267c 	movw	r6, #8828	; 0x227c
 80001e2:	f242 2578 	movw	r5, #8824	; 0x2278
 80001e6:	f6c0 0600 	movt	r6, #2048	; 0x800
 80001ea:	f6c0 0500 	movt	r5, #2048	; 0x800
 80001ee:	1b76      	subs	r6, r6, r5
 80001f0:	f002 f836 	bl	8002260 <_init>
 80001f4:	10b6      	asrs	r6, r6, #2
 80001f6:	d006      	beq.n	8000206 <__libc_init_array+0x4e>
 80001f8:	2400      	movs	r4, #0
 80001fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80001fe:	3401      	adds	r4, #1
 8000200:	4798      	blx	r3
 8000202:	42a6      	cmp	r6, r4
 8000204:	d1f9      	bne.n	80001fa <__libc_init_array+0x42>
 8000206:	bd70      	pop	{r4, r5, r6, pc}

08000208 <memcmp>:
 8000208:	2a03      	cmp	r2, #3
 800020a:	b470      	push	{r4, r5, r6}
 800020c:	4604      	mov	r4, r0
 800020e:	460d      	mov	r5, r1
 8000210:	d926      	bls.n	8000260 <memcmp+0x58>
 8000212:	ea41 0300 	orr.w	r3, r1, r0
 8000216:	f013 0f03 	tst.w	r3, #3
 800021a:	d013      	beq.n	8000244 <memcmp+0x3c>
 800021c:	7820      	ldrb	r0, [r4, #0]
 800021e:	782b      	ldrb	r3, [r5, #0]
 8000220:	4298      	cmp	r0, r3
 8000222:	bf08      	it	eq
 8000224:	4629      	moveq	r1, r5
 8000226:	d006      	beq.n	8000236 <memcmp+0x2e>
 8000228:	e01e      	b.n	8000268 <memcmp+0x60>
 800022a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800022e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000232:	4298      	cmp	r0, r3
 8000234:	d118      	bne.n	8000268 <memcmp+0x60>
 8000236:	2a01      	cmp	r2, #1
 8000238:	f102 32ff 	add.w	r2, r2, #4294967295
 800023c:	d1f5      	bne.n	800022a <memcmp+0x22>
 800023e:	2000      	movs	r0, #0
 8000240:	bc70      	pop	{r4, r5, r6}
 8000242:	4770      	bx	lr
 8000244:	460b      	mov	r3, r1
 8000246:	4604      	mov	r4, r0
 8000248:	f851 5b04 	ldr.w	r5, [r1], #4
 800024c:	f850 6b04 	ldr.w	r6, [r0], #4
 8000250:	42ae      	cmp	r6, r5
 8000252:	d104      	bne.n	800025e <memcmp+0x56>
 8000254:	3a04      	subs	r2, #4
 8000256:	4604      	mov	r4, r0
 8000258:	2a03      	cmp	r2, #3
 800025a:	460b      	mov	r3, r1
 800025c:	d8f2      	bhi.n	8000244 <memcmp+0x3c>
 800025e:	461d      	mov	r5, r3
 8000260:	4610      	mov	r0, r2
 8000262:	2a00      	cmp	r2, #0
 8000264:	d1da      	bne.n	800021c <memcmp+0x14>
 8000266:	e7eb      	b.n	8000240 <memcmp+0x38>
 8000268:	1ac0      	subs	r0, r0, r3
 800026a:	e7e9      	b.n	8000240 <memcmp+0x38>

0800026c <memcpy>:
 800026c:	2a03      	cmp	r2, #3
 800026e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000272:	d809      	bhi.n	8000288 <memcpy+0x1c>
 8000274:	b12a      	cbz	r2, 8000282 <memcpy+0x16>
 8000276:	2300      	movs	r3, #0
 8000278:	5ccc      	ldrb	r4, [r1, r3]
 800027a:	54c4      	strb	r4, [r0, r3]
 800027c:	3301      	adds	r3, #1
 800027e:	4293      	cmp	r3, r2
 8000280:	d1fa      	bne.n	8000278 <memcpy+0xc>
 8000282:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8000286:	4770      	bx	lr
 8000288:	460b      	mov	r3, r1
 800028a:	1882      	adds	r2, r0, r2
 800028c:	4601      	mov	r1, r0
 800028e:	e003      	b.n	8000298 <memcpy+0x2c>
 8000290:	7824      	ldrb	r4, [r4, #0]
 8000292:	3301      	adds	r3, #1
 8000294:	f801 4b01 	strb.w	r4, [r1], #1
 8000298:	f011 0f03 	tst.w	r1, #3
 800029c:	461c      	mov	r4, r3
 800029e:	d1f7      	bne.n	8000290 <memcpy+0x24>
 80002a0:	f013 0503 	ands.w	r5, r3, #3
 80002a4:	d05d      	beq.n	8000362 <memcpy+0xf6>
 80002a6:	426e      	negs	r6, r5
 80002a8:	f1c5 0c04 	rsb	ip, r5, #4
 80002ac:	00ed      	lsls	r5, r5, #3
 80002ae:	599b      	ldr	r3, [r3, r6]
 80002b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80002b4:	e008      	b.n	80002c8 <memcpy+0x5c>
 80002b6:	3404      	adds	r4, #4
 80002b8:	59a7      	ldr	r7, [r4, r6]
 80002ba:	463b      	mov	r3, r7
 80002bc:	fa07 f70c 	lsl.w	r7, r7, ip
 80002c0:	ea48 0707 	orr.w	r7, r8, r7
 80002c4:	f841 7b04 	str.w	r7, [r1], #4
 80002c8:	1a57      	subs	r7, r2, r1
 80002ca:	fa23 f805 	lsr.w	r8, r3, r5
 80002ce:	2f03      	cmp	r7, #3
 80002d0:	dcf1      	bgt.n	80002b6 <memcpy+0x4a>
 80002d2:	e003      	b.n	80002dc <memcpy+0x70>
 80002d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80002d8:	f801 3b01 	strb.w	r3, [r1], #1
 80002dc:	428a      	cmp	r2, r1
 80002de:	d8f9      	bhi.n	80002d4 <memcpy+0x68>
 80002e0:	e7cf      	b.n	8000282 <memcpy+0x16>
 80002e2:	f853 4c40 	ldr.w	r4, [r3, #-64]
 80002e6:	f841 4c40 	str.w	r4, [r1, #-64]
 80002ea:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 80002ee:	f841 4c3c 	str.w	r4, [r1, #-60]
 80002f2:	f853 4c38 	ldr.w	r4, [r3, #-56]
 80002f6:	f841 4c38 	str.w	r4, [r1, #-56]
 80002fa:	f853 4c34 	ldr.w	r4, [r3, #-52]
 80002fe:	f841 4c34 	str.w	r4, [r1, #-52]
 8000302:	f853 4c30 	ldr.w	r4, [r3, #-48]
 8000306:	f841 4c30 	str.w	r4, [r1, #-48]
 800030a:	f853 4c2c 	ldr.w	r4, [r3, #-44]
 800030e:	f841 4c2c 	str.w	r4, [r1, #-44]
 8000312:	f853 4c28 	ldr.w	r4, [r3, #-40]
 8000316:	f841 4c28 	str.w	r4, [r1, #-40]
 800031a:	f853 4c24 	ldr.w	r4, [r3, #-36]
 800031e:	f841 4c24 	str.w	r4, [r1, #-36]
 8000322:	f853 4c20 	ldr.w	r4, [r3, #-32]
 8000326:	f841 4c20 	str.w	r4, [r1, #-32]
 800032a:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 800032e:	f841 4c1c 	str.w	r4, [r1, #-28]
 8000332:	f853 4c18 	ldr.w	r4, [r3, #-24]
 8000336:	f841 4c18 	str.w	r4, [r1, #-24]
 800033a:	f853 4c14 	ldr.w	r4, [r3, #-20]
 800033e:	f841 4c14 	str.w	r4, [r1, #-20]
 8000342:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8000346:	f841 4c10 	str.w	r4, [r1, #-16]
 800034a:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 800034e:	f841 4c0c 	str.w	r4, [r1, #-12]
 8000352:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8000356:	f841 4c08 	str.w	r4, [r1, #-8]
 800035a:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800035e:	f841 4c04 	str.w	r4, [r1, #-4]
 8000362:	1a56      	subs	r6, r2, r1
 8000364:	461d      	mov	r5, r3
 8000366:	460c      	mov	r4, r1
 8000368:	3340      	adds	r3, #64	; 0x40
 800036a:	3140      	adds	r1, #64	; 0x40
 800036c:	2e3f      	cmp	r6, #63	; 0x3f
 800036e:	dcb8      	bgt.n	80002e2 <memcpy+0x76>
 8000370:	462b      	mov	r3, r5
 8000372:	e00f      	b.n	8000394 <memcpy+0x128>
 8000374:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8000378:	f844 1c10 	str.w	r1, [r4, #-16]
 800037c:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8000380:	f844 1c0c 	str.w	r1, [r4, #-12]
 8000384:	f853 1c08 	ldr.w	r1, [r3, #-8]
 8000388:	f844 1c08 	str.w	r1, [r4, #-8]
 800038c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8000390:	f844 1c04 	str.w	r1, [r4, #-4]
 8000394:	1b16      	subs	r6, r2, r4
 8000396:	4621      	mov	r1, r4
 8000398:	461d      	mov	r5, r3
 800039a:	3410      	adds	r4, #16
 800039c:	3310      	adds	r3, #16
 800039e:	2e0f      	cmp	r6, #15
 80003a0:	dce8      	bgt.n	8000374 <memcpy+0x108>
 80003a2:	462b      	mov	r3, r5
 80003a4:	e002      	b.n	80003ac <memcpy+0x140>
 80003a6:	6824      	ldr	r4, [r4, #0]
 80003a8:	f841 4b04 	str.w	r4, [r1], #4
 80003ac:	1a55      	subs	r5, r2, r1
 80003ae:	461c      	mov	r4, r3
 80003b0:	2d03      	cmp	r5, #3
 80003b2:	f103 0304 	add.w	r3, r3, #4
 80003b6:	dcf6      	bgt.n	80003a6 <memcpy+0x13a>
 80003b8:	e790      	b.n	80002dc <memcpy+0x70>
 80003ba:	bf00      	nop

080003bc <memset>:
 80003bc:	2a03      	cmp	r2, #3
 80003be:	b2c9      	uxtb	r1, r1
 80003c0:	b470      	push	{r4, r5, r6}
 80003c2:	d808      	bhi.n	80003d6 <memset+0x1a>
 80003c4:	b12a      	cbz	r2, 80003d2 <memset+0x16>
 80003c6:	4603      	mov	r3, r0
 80003c8:	1812      	adds	r2, r2, r0
 80003ca:	f803 1b01 	strb.w	r1, [r3], #1
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d1fb      	bne.n	80003ca <memset+0xe>
 80003d2:	bc70      	pop	{r4, r5, r6}
 80003d4:	4770      	bx	lr
 80003d6:	1882      	adds	r2, r0, r2
 80003d8:	4604      	mov	r4, r0
 80003da:	e001      	b.n	80003e0 <memset+0x24>
 80003dc:	f804 1b01 	strb.w	r1, [r4], #1
 80003e0:	f014 0f03 	tst.w	r4, #3
 80003e4:	d1fa      	bne.n	80003dc <memset+0x20>
 80003e6:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 80003ea:	fb03 f301 	mul.w	r3, r3, r1
 80003ee:	e01f      	b.n	8000430 <memset+0x74>
 80003f0:	f844 3c40 	str.w	r3, [r4, #-64]
 80003f4:	f844 3c3c 	str.w	r3, [r4, #-60]
 80003f8:	f844 3c38 	str.w	r3, [r4, #-56]
 80003fc:	f844 3c34 	str.w	r3, [r4, #-52]
 8000400:	f844 3c30 	str.w	r3, [r4, #-48]
 8000404:	f844 3c2c 	str.w	r3, [r4, #-44]
 8000408:	f844 3c28 	str.w	r3, [r4, #-40]
 800040c:	f844 3c24 	str.w	r3, [r4, #-36]
 8000410:	f844 3c20 	str.w	r3, [r4, #-32]
 8000414:	f844 3c1c 	str.w	r3, [r4, #-28]
 8000418:	f844 3c18 	str.w	r3, [r4, #-24]
 800041c:	f844 3c14 	str.w	r3, [r4, #-20]
 8000420:	f844 3c10 	str.w	r3, [r4, #-16]
 8000424:	f844 3c0c 	str.w	r3, [r4, #-12]
 8000428:	f844 3c08 	str.w	r3, [r4, #-8]
 800042c:	f844 3c04 	str.w	r3, [r4, #-4]
 8000430:	1b16      	subs	r6, r2, r4
 8000432:	4625      	mov	r5, r4
 8000434:	3440      	adds	r4, #64	; 0x40
 8000436:	2e3f      	cmp	r6, #63	; 0x3f
 8000438:	dcda      	bgt.n	80003f0 <memset+0x34>
 800043a:	462c      	mov	r4, r5
 800043c:	e007      	b.n	800044e <memset+0x92>
 800043e:	f844 3c10 	str.w	r3, [r4, #-16]
 8000442:	f844 3c0c 	str.w	r3, [r4, #-12]
 8000446:	f844 3c08 	str.w	r3, [r4, #-8]
 800044a:	f844 3c04 	str.w	r3, [r4, #-4]
 800044e:	1b16      	subs	r6, r2, r4
 8000450:	4625      	mov	r5, r4
 8000452:	3410      	adds	r4, #16
 8000454:	2e0f      	cmp	r6, #15
 8000456:	dcf2      	bgt.n	800043e <memset+0x82>
 8000458:	e001      	b.n	800045e <memset+0xa2>
 800045a:	f845 3b04 	str.w	r3, [r5], #4
 800045e:	1b54      	subs	r4, r2, r5
 8000460:	2c03      	cmp	r4, #3
 8000462:	dcfa      	bgt.n	800045a <memset+0x9e>
 8000464:	e001      	b.n	800046a <memset+0xae>
 8000466:	f805 1b01 	strb.w	r1, [r5], #1
 800046a:	4295      	cmp	r5, r2
 800046c:	d3fb      	bcc.n	8000466 <memset+0xaa>
 800046e:	e7b0      	b.n	80003d2 <memset+0x16>

08000470 <strncpy>:
 8000470:	ea41 0300 	orr.w	r3, r1, r0
 8000474:	f013 0f03 	tst.w	r3, #3
 8000478:	460b      	mov	r3, r1
 800047a:	b470      	push	{r4, r5, r6}
 800047c:	bf14      	ite	ne
 800047e:	2400      	movne	r4, #0
 8000480:	2401      	moveq	r4, #1
 8000482:	2a03      	cmp	r2, #3
 8000484:	bf94      	ite	ls
 8000486:	2400      	movls	r4, #0
 8000488:	f004 0401 	andhi.w	r4, r4, #1
 800048c:	4605      	mov	r5, r0
 800048e:	b9d4      	cbnz	r4, 80004c6 <strncpy+0x56>
 8000490:	b1ba      	cbz	r2, 80004c2 <strncpy+0x52>
 8000492:	780e      	ldrb	r6, [r1, #0]
 8000494:	462b      	mov	r3, r5
 8000496:	3a01      	subs	r2, #1
 8000498:	f803 6b01 	strb.w	r6, [r3], #1
 800049c:	b156      	cbz	r6, 80004b4 <strncpy+0x44>
 800049e:	1cac      	adds	r4, r5, #2
 80004a0:	b17a      	cbz	r2, 80004c2 <strncpy+0x52>
 80004a2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80004a6:	4623      	mov	r3, r4
 80004a8:	3a01      	subs	r2, #1
 80004aa:	f804 5c01 	strb.w	r5, [r4, #-1]
 80004ae:	3401      	adds	r4, #1
 80004b0:	2d00      	cmp	r5, #0
 80004b2:	d1f5      	bne.n	80004a0 <strncpy+0x30>
 80004b4:	b12a      	cbz	r2, 80004c2 <strncpy+0x52>
 80004b6:	189a      	adds	r2, r3, r2
 80004b8:	2100      	movs	r1, #0
 80004ba:	f803 1b01 	strb.w	r1, [r3], #1
 80004be:	4293      	cmp	r3, r2
 80004c0:	d1fb      	bne.n	80004ba <strncpy+0x4a>
 80004c2:	bc70      	pop	{r4, r5, r6}
 80004c4:	4770      	bx	lr
 80004c6:	4619      	mov	r1, r3
 80004c8:	f853 4b04 	ldr.w	r4, [r3], #4
 80004cc:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
 80004d0:	ea26 0604 	bic.w	r6, r6, r4
 80004d4:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80004d8:	d1da      	bne.n	8000490 <strncpy+0x20>
 80004da:	3a04      	subs	r2, #4
 80004dc:	f845 4b04 	str.w	r4, [r5], #4
 80004e0:	2a03      	cmp	r2, #3
 80004e2:	4619      	mov	r1, r3
 80004e4:	d8ef      	bhi.n	80004c6 <strncpy+0x56>
 80004e6:	e7d3      	b.n	8000490 <strncpy+0x20>

080004e8 <prvLED_Config>:
	/* Configure LIS302 in order to produce data used for TIM4 reconfiguration and LED control */
	//prvMEMS_Config();
}

void prvLED_Config(char state)
{
 80004e8:	b513      	push	{r0, r1, r4, lr}
 80004ea:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStructure;
  /* GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80004ec:	2101      	movs	r1, #1
 80004ee:	2020      	movs	r0, #32
 80004f0:	f000 fb98 	bl	8000c24 <RCC_AHB1PeriphClockCmd>
  /* Configure PF6, PF7, PF8 and PF9 in output push-pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
 80004f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80004f8:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80004fa:	2203      	movs	r2, #3
  GPIO_InitTypeDef  GPIO_InitStructure;
  /* GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
  /* Configure PF6, PF7, PF8 and PF9 in output push-pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f88d 3006 	strb.w	r3, [sp, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000502:	f88d 2005 	strb.w	r2, [sp, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000506:	f88d 3007 	strb.w	r3, [sp, #7]

  if(state==GPIO)
 800050a:	b93c      	cbnz	r4, 800051c <prvLED_Config+0x34>
  {
	  /* standard output pin */
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800050c:	3301      	adds	r3, #1
	  GPIO_Init(GPIOF, &GPIO_InitStructure);
 800050e:	4811      	ldr	r0, [pc, #68]	; (8000554 <prvLED_Config+0x6c>)
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;

  if(state==GPIO)
  {
	  /* standard output pin */
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000510:	f88d 3004 	strb.w	r3, [sp, #4]
	  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000514:	4669      	mov	r1, sp
 8000516:	f000 fb2b 	bl	8000b70 <GPIO_Init>
 800051a:	e01a      	b.n	8000552 <prvLED_Config+0x6a>
  else
  {
	  /*-------------------------- GPIO Configuration ----------------------------*/
	  /* GPIOD Configuration: Pins 6, 7, 8 and 9 in output push-pull - alternative mode */
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800051c:	2402      	movs	r4, #2
	  GPIO_Init(GPIOF, &GPIO_InitStructure);
 800051e:	480d      	ldr	r0, [pc, #52]	; (8000554 <prvLED_Config+0x6c>)
  else
  {
	  /*-------------------------- GPIO Configuration ----------------------------*/
	  /* GPIOD Configuration: Pins 6, 7, 8 and 9 in output push-pull - alternative mode */
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000520:	f88d 4004 	strb.w	r4, [sp, #4]
	  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000524:	4669      	mov	r1, sp
 8000526:	f000 fb23 	bl	8000b70 <GPIO_Init>

	  /* Connect TIM4 pins to AF2 */
	  GPIO_PinAFConfig(GPIOF, GPIO_PinSource6, GPIO_AF_TIM4);
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <prvLED_Config+0x6c>)
 800052c:	2106      	movs	r1, #6
 800052e:	4622      	mov	r2, r4
 8000530:	f000 fb61 	bl	8000bf6 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOF, GPIO_PinSource7, GPIO_AF_TIM4);
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <prvLED_Config+0x6c>)
 8000536:	2107      	movs	r1, #7
 8000538:	4622      	mov	r2, r4
 800053a:	f000 fb5c 	bl	8000bf6 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOF, GPIO_PinSource8, GPIO_AF_TIM4);
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <prvLED_Config+0x6c>)
 8000540:	2108      	movs	r1, #8
 8000542:	4622      	mov	r2, r4
 8000544:	f000 fb57 	bl	8000bf6 <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOF, GPIO_PinSource9, GPIO_AF_TIM4);
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <prvLED_Config+0x6c>)
 800054a:	2109      	movs	r1, #9
 800054c:	4622      	mov	r2, r4
 800054e:	f000 fb52 	bl	8000bf6 <GPIO_PinAFConfig>
  }
}
 8000552:	bd1c      	pop	{r2, r3, r4, pc}
 8000554:	40021400 	.word	0x40021400

08000558 <prvTIM4_Config>:
  {
  }
}

void prvTIM4_Config(void)
{
 8000558:	b510      	push	{r4, lr}
  TIM_OCInitTypeDef  TIM_OCInitStructure;
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

  /* --------------------------- System Clocks Configuration -----------------*/
  /* TIM4 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800055a:	2004      	movs	r0, #4
  {
  }
}

void prvTIM4_Config(void)
{
 800055c:	b088      	sub	sp, #32
  TIM_OCInitTypeDef  TIM_OCInitStructure;
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

  /* --------------------------- System Clocks Configuration -----------------*/
  /* TIM4 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800055e:	2101      	movs	r1, #1
 8000560:	f000 fb6c 	bl	8000c3c <RCC_APB1PeriphClockCmd>
     function to update SystemCoreClock variable value. Otherwise, any configuration
     based on this variable will be incorrect.
  ----------------------------------------------------------------------- */

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;
 8000564:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <prvTIM4_Config+0xc0>)
  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = TIM_ARR;
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8000566:	482d      	ldr	r0, [pc, #180]	; (800061c <prvTIM4_Config+0xc4>)
     function to update SystemCoreClock variable value. Otherwise, any configuration
     based on this variable will be incorrect.
  ----------------------------------------------------------------------- */

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = TIM_ARR;
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000572:	2400      	movs	r4, #0
     function to update SystemCoreClock variable value. Otherwise, any configuration
     based on this variable will be incorrect.
  ----------------------------------------------------------------------- */

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;
 8000574:	3b01      	subs	r3, #1

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = TIM_ARR;
 8000576:	f240 726c 	movw	r2, #1900	; 0x76c
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800057a:	a905      	add	r1, sp, #20

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = TIM_ARR;
 800057c:	9206      	str	r2, [sp, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 800057e:	f8ad 3014 	strh.w	r3, [sp, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000582:	f8ad 401c 	strh.w	r4, [sp, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000586:	f8ad 4016 	strh.w	r4, [sp, #22]
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800058a:	f000 fb89 	bl	8000ca0 <TIM_TimeBaseInit>

  /* Enable TIM4 Preload register on ARR */
  TIM_ARRPreloadConfig(TIM4, ENABLE);
 800058e:	2101      	movs	r1, #1
 8000590:	4822      	ldr	r0, [pc, #136]	; (800061c <prvTIM4_Config+0xc4>)
 8000592:	f000 fbcb 	bl	8000d2c <TIM_ARRPreloadConfig>

  /* TIM PWM1 Mode configuration: Channel */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000596:	2360      	movs	r3, #96	; 0x60
 8000598:	f8ad 3000 	strh.w	r3, [sp]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800059c:	2301      	movs	r3, #1
 800059e:	f8ad 3002 	strh.w	r3, [sp, #2]
  TIM_OCInitStructure.TIM_Pulse = TIM_CCR;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

  /* Output Compare PWM1 Mode configuration: Channel1 */
  TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 80005a2:	4669      	mov	r1, sp
  TIM_ARRPreloadConfig(TIM4, ENABLE);

  /* TIM PWM1 Mode configuration: Channel */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = TIM_CCR;
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

  /* Output Compare PWM1 Mode configuration: Channel1 */
  TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 80005a8:	481c      	ldr	r0, [pc, #112]	; (800061c <prvTIM4_Config+0xc4>)
  TIM_ARRPreloadConfig(TIM4, ENABLE);

  /* TIM PWM1 Mode configuration: Channel */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = TIM_CCR;
 80005aa:	9302      	str	r3, [sp, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80005ac:	f8ad 400c 	strh.w	r4, [sp, #12]

  /* Output Compare PWM1 Mode configuration: Channel1 */
  TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 80005b0:	f000 fbd6 	bl	8000d60 <TIM_OC1Init>
  TIM_CCxCmd(TIM4, TIM_Channel_1, DISABLE);
 80005b4:	4622      	mov	r2, r4
 80005b6:	4621      	mov	r1, r4
 80005b8:	4818      	ldr	r0, [pc, #96]	; (800061c <prvTIM4_Config+0xc4>)
 80005ba:	f000 fcef 	bl	8000f9c <TIM_CCxCmd>

  TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80005be:	2108      	movs	r1, #8
 80005c0:	4816      	ldr	r0, [pc, #88]	; (800061c <prvTIM4_Config+0xc4>)
 80005c2:	f000 fcc7 	bl	8000f54 <TIM_OC1PreloadConfig>

  /* Output Compare PWM1 Mode configuration: Channel2 */
  TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 80005c6:	4669      	mov	r1, sp
 80005c8:	4814      	ldr	r0, [pc, #80]	; (800061c <prvTIM4_Config+0xc4>)
 80005ca:	f000 fc0b 	bl	8000de4 <TIM_OC2Init>
  TIM_CCxCmd(TIM4, TIM_Channel_2, DISABLE);
 80005ce:	4622      	mov	r2, r4
 80005d0:	2104      	movs	r1, #4
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <prvTIM4_Config+0xc4>)
 80005d4:	f000 fce2 	bl	8000f9c <TIM_CCxCmd>

  TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80005d8:	2108      	movs	r1, #8
 80005da:	4810      	ldr	r0, [pc, #64]	; (800061c <prvTIM4_Config+0xc4>)
 80005dc:	f000 fcc3 	bl	8000f66 <TIM_OC2PreloadConfig>

  /* Output Compare PWM1 Mode configuration: Channel3 */
  TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 80005e0:	4669      	mov	r1, sp
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <prvTIM4_Config+0xc4>)
 80005e4:	f000 fc42 	bl	8000e6c <TIM_OC3Init>
  TIM_CCxCmd(TIM4, TIM_Channel_3, DISABLE);
 80005e8:	4622      	mov	r2, r4
 80005ea:	2108      	movs	r1, #8
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <prvTIM4_Config+0xc4>)
 80005ee:	f000 fcd5 	bl	8000f9c <TIM_CCxCmd>

  TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80005f2:	2108      	movs	r1, #8
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <prvTIM4_Config+0xc4>)
 80005f6:	f000 fcbf 	bl	8000f78 <TIM_OC3PreloadConfig>

  /* Output Compare PWM1 Mode configuration: Channel4 */
  TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 80005fa:	4669      	mov	r1, sp
 80005fc:	4807      	ldr	r0, [pc, #28]	; (800061c <prvTIM4_Config+0xc4>)
 80005fe:	f000 fc77 	bl	8000ef0 <TIM_OC4Init>
  TIM_CCxCmd(TIM4, TIM_Channel_4, DISABLE);
 8000602:	210c      	movs	r1, #12
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <prvTIM4_Config+0xc4>)
 8000606:	4622      	mov	r2, r4
 8000608:	f000 fcc8 	bl	8000f9c <TIM_CCxCmd>

  TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <prvTIM4_Config+0xc4>)
 800060e:	2108      	movs	r1, #8
 8000610:	f000 fcbb 	bl	8000f8a <TIM_OC4PreloadConfig>
}
 8000614:	b008      	add	sp, #32
 8000616:	bd10      	pop	{r4, pc}
 8000618:	20000000 	.word	0x20000000
 800061c:	40000800 	.word	0x40000800

08000620 <prvSetupHardware>:
#include "hw_config.h"


/*-----------------------------------------------------------*/
void prvSetupHardware( void )
{
 8000620:	b510      	push	{r4, lr}
	/* Set the Vector Table base address at 0x08000000 */
	NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x0 );
 8000622:	2100      	movs	r1, #0
 8000624:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000628:	f000 fa46 	bl	8000ab8 <NVIC_SetVectorTable>
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 800062c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000630:	f000 fa04 	bl	8000a3c <NVIC_PriorityGroupConfig>

	/* Configure LED IOs as output push-pull */
    /* Initialize LEDs on STM32F4_Discovery board */
	prvLED_Config(GPIO);
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff ff57 	bl	80004e8 <prvLED_Config>
	/* Configure User button pin (PA0) as external interrupt -> modes switching */
	STM_EVAL_PBInit(BUTTON_USER,BUTTON_MODE_EXTI);
 800063a:	2000      	movs	r0, #0
 800063c:	2101      	movs	r1, #1
 800063e:	f000 f9a9 	bl	8000994 <STM_EVAL_PBInit>
	/* Configuration of Timer4 to control LEDs based on MEMS data */
	prvTIM4_Config();

	/* Configure LIS302 in order to produce data used for TIM4 reconfiguration and LED control */
	//prvMEMS_Config();
}
 8000642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvLED_Config(GPIO);
	/* Configure User button pin (PA0) as external interrupt -> modes switching */
	STM_EVAL_PBInit(BUTTON_USER,BUTTON_MODE_EXTI);

	/* Configuration of Timer4 to control LEDs based on MEMS data */
	prvTIM4_Config();
 8000646:	f7ff bf87 	b.w	8000558 <prvTIM4_Config>
	...

0800064c <vSWITCHTask>:
}

/*-----------------------------------------------------------*/

void vSWITCHTask( void *pvParameters )
{
 800064c:	b570      	push	{r4, r5, r6, lr}
	static int i=0;
	for( ;; )
	{
		if(xSemaphoreTake(xSemaphoreSW,( portTickType ) 0) == pdTRUE)
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <vSWITCHTask+0x78>)
 8000650:	2100      	movs	r1, #0
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	460a      	mov	r2, r1
 8000656:	460b      	mov	r3, r1
 8000658:	f000 ff66 	bl	8001528 <xQueueGenericReceive>
 800065c:	2801      	cmp	r0, #1
 800065e:	4606      	mov	r6, r0
 8000660:	d12d      	bne.n	80006be <vSWITCHTask+0x72>
		{
			i^=1;		//just switch the state if semaphore was given
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <vSWITCHTask+0x7c>)
 8000664:	4c19      	ldr	r4, [pc, #100]	; (80006cc <vSWITCHTask+0x80>)
 8000666:	681d      	ldr	r5, [r3, #0]
 8000668:	f085 0501 	eor.w	r5, r5, #1
 800066c:	601d      	str	r5, [r3, #0]

			if(i==0)	//LED3..LD6 tasks ready, BALANCE, MEMS suspended
 800066e:	b99d      	cbnz	r5, 8000698 <vSWITCHTask+0x4c>
			{
				//vTaskSuspend(xBALANCE_Task);
				TIM_Cmd(TIM4, DISABLE);
 8000670:	4629      	mov	r1, r5
 8000672:	4817      	ldr	r0, [pc, #92]	; (80006d0 <vSWITCHTask+0x84>)
 8000674:	f000 fb67 	bl	8000d46 <TIM_Cmd>
				//vTaskSuspend(xMEMS_Task);
				prvLED_Config(GPIO);
 8000678:	4628      	mov	r0, r5
 800067a:	f7ff ff35 	bl	80004e8 <prvLED_Config>
				vTaskResume(xLED_Tasks[0]);
 800067e:	6820      	ldr	r0, [r4, #0]
 8000680:	f001 f932 	bl	80018e8 <vTaskResume>
				vTaskResume(xLED_Tasks[1]);
 8000684:	6860      	ldr	r0, [r4, #4]
 8000686:	f001 f92f 	bl	80018e8 <vTaskResume>
				vTaskResume(xLED_Tasks[2]);
 800068a:	68a0      	ldr	r0, [r4, #8]
 800068c:	f001 f92c 	bl	80018e8 <vTaskResume>
				vTaskResume(xLED_Tasks[3]);
 8000690:	68e0      	ldr	r0, [r4, #12]
 8000692:	f001 f929 	bl	80018e8 <vTaskResume>
 8000696:	e012      	b.n	80006be <vSWITCHTask+0x72>
			}
			else		//MEMS and BALANCE ready, LED tasks suspended
			{
				vTaskSuspend(xLED_Tasks[0]);
 8000698:	6820      	ldr	r0, [r4, #0]
 800069a:	f001 fb17 	bl	8001ccc <vTaskSuspend>
				vTaskSuspend(xLED_Tasks[1]);
 800069e:	6860      	ldr	r0, [r4, #4]
 80006a0:	f001 fb14 	bl	8001ccc <vTaskSuspend>
				vTaskSuspend(xLED_Tasks[2]);
 80006a4:	68a0      	ldr	r0, [r4, #8]
 80006a6:	f001 fb11 	bl	8001ccc <vTaskSuspend>
				vTaskSuspend(xLED_Tasks[3]);
 80006aa:	68e0      	ldr	r0, [r4, #12]
 80006ac:	f001 fb0e 	bl	8001ccc <vTaskSuspend>
				prvLED_Config(TIMER);
 80006b0:	4630      	mov	r0, r6
 80006b2:	f7ff ff19 	bl	80004e8 <prvLED_Config>
				TIM_Cmd(TIM4, ENABLE);
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <vSWITCHTask+0x84>)
 80006b8:	4631      	mov	r1, r6
 80006ba:	f000 fb44 	bl	8000d46 <TIM_Cmd>
				//vTaskResume(xBALANCE_Task);
				//vTaskResume(xMEMS_Task);
			}
		}
		taskYIELD(); 	//task is going to ready state to allow next one to run
 80006be:	f000 fd45 	bl	800114c <vPortYieldFromISR>
	}
 80006c2:	e7c4      	b.n	800064e <vSWITCHTask+0x2>
 80006c4:	20000030 	.word	0x20000030
 80006c8:	2000002c 	.word	0x2000002c
 80006cc:	2000c988 	.word	0x2000c988
 80006d0:	40000800 	.word	0x40000800

080006d4 <vLEDTask>:
}

/*-----------------------------------------------------------*/

void vLEDTask( void *pvParameters )
{
 80006d4:	b510      	push	{r4, lr}
 80006d6:	4604      	mov	r4, r0
    volatile int *LED;
    LED = (int *) pvParameters;

	for( ;; )
	{
		STM_EVAL_LEDToggle((Led_TypeDef)LED[0]);
 80006d8:	6820      	ldr	r0, [r4, #0]
 80006da:	b2c0      	uxtb	r0, r0
 80006dc:	f000 f94a 	bl	8000974 <STM_EVAL_LEDToggle>
	    vTaskDelay(LED[1]/portTICK_RATE_MS);
 80006e0:	6860      	ldr	r0, [r4, #4]
 80006e2:	f001 fa83 	bl	8001bec <vTaskDelay>
 80006e6:	e7f7      	b.n	80006d8 <vLEDTask+0x4>

080006e8 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{ 
 80006e8:	b530      	push	{r4, r5, lr}
	/* create a pipe for MEMS->TIM4 data exchange */
	xQueue=xQueueCreate(1,queueSIZE*sizeof(uint8_t));
 80006ea:	2106      	movs	r1, #6
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{ 
 80006ec:	b085      	sub	sp, #20
	/* create a pipe for MEMS->TIM4 data exchange */
	xQueue=xQueueCreate(1,queueSIZE*sizeof(uint8_t));
 80006ee:	2001      	movs	r0, #1
 80006f0:	f000 fe2a 	bl	8001348 <xQueueCreate>
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <main+0xb4>)

	/* create semaphores... */
	vSemaphoreCreateBinary( xSemaphoreSW );
 80006f6:	4c2a      	ldr	r4, [pc, #168]	; (80007a0 <main+0xb8>)
  * @retval None
  */
int main(void)
{ 
	/* create a pipe for MEMS->TIM4 data exchange */
	xQueue=xQueueCreate(1,queueSIZE*sizeof(uint8_t));
 80006f8:	6018      	str	r0, [r3, #0]

	/* create semaphores... */
	vSemaphoreCreateBinary( xSemaphoreSW );
 80006fa:	2100      	movs	r1, #0
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 fe23 	bl	8001348 <xQueueCreate>
 8000702:	6020      	str	r0, [r4, #0]
 8000704:	b120      	cbz	r0, 8000710 <main+0x28>
 8000706:	2100      	movs	r1, #0
 8000708:	460a      	mov	r2, r1
 800070a:	460b      	mov	r3, r1
 800070c:	f000 fe4d 	bl	80013aa <xQueueGenericSend>

	/* ...and clean them up */
	if(xSemaphoreTake(xSemaphoreSW, ( portTickType ) 0) == pdTRUE)
 8000710:	2100      	movs	r1, #0
 8000712:	460a      	mov	r2, r1
 8000714:	460b      	mov	r3, r1

	/* initialize hardware... */
	prvSetupHardware();

	/* Start the tasks defined within this file/specific to this demo. */
	xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED3", configMINIMAL_STACK_SIZE, (void *)LEDS[0],tskIDLE_PRIORITY, &xLED_Tasks[0] );
 8000716:	4d23      	ldr	r5, [pc, #140]	; (80007a4 <main+0xbc>)

	/* create semaphores... */
	vSemaphoreCreateBinary( xSemaphoreSW );

	/* ...and clean them up */
	if(xSemaphoreTake(xSemaphoreSW, ( portTickType ) 0) == pdTRUE)
 8000718:	6820      	ldr	r0, [r4, #0]
 800071a:	f000 ff05 	bl	8001528 <xQueueGenericReceive>

	/* initialize hardware... */
	prvSetupHardware();

	/* Start the tasks defined within this file/specific to this demo. */
	xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED3", configMINIMAL_STACK_SIZE, (void *)LEDS[0],tskIDLE_PRIORITY, &xLED_Tasks[0] );
 800071e:	2400      	movs	r4, #0
	if(xSemaphoreTake(xSemaphoreSW, ( portTickType ) 0) == pdTRUE)
	{
	}

	/* initialize hardware... */
	prvSetupHardware();
 8000720:	f7ff ff7e 	bl	8000620 <prvSetupHardware>

	/* Start the tasks defined within this file/specific to this demo. */
	xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED3", configMINIMAL_STACK_SIZE, (void *)LEDS[0],tskIDLE_PRIORITY, &xLED_Tasks[0] );
 8000724:	22c8      	movs	r2, #200	; 0xc8
 8000726:	4920      	ldr	r1, [pc, #128]	; (80007a8 <main+0xc0>)
 8000728:	4b20      	ldr	r3, [pc, #128]	; (80007ac <main+0xc4>)
 800072a:	4821      	ldr	r0, [pc, #132]	; (80007b0 <main+0xc8>)
 800072c:	9501      	str	r5, [sp, #4]
 800072e:	9400      	str	r4, [sp, #0]
 8000730:	9402      	str	r4, [sp, #8]
 8000732:	9403      	str	r4, [sp, #12]
 8000734:	f000 ffd4 	bl	80016e0 <xTaskGenericCreate>
	xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED4", configMINIMAL_STACK_SIZE, (void *)LEDS[1],tskIDLE_PRIORITY, &xLED_Tasks[1] );
 8000738:	1d2b      	adds	r3, r5, #4
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	22c8      	movs	r2, #200	; 0xc8
 800073e:	491d      	ldr	r1, [pc, #116]	; (80007b4 <main+0xcc>)
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <main+0xd0>)
 8000742:	481b      	ldr	r0, [pc, #108]	; (80007b0 <main+0xc8>)
 8000744:	9400      	str	r4, [sp, #0]
 8000746:	9402      	str	r4, [sp, #8]
 8000748:	9403      	str	r4, [sp, #12]
 800074a:	f000 ffc9 	bl	80016e0 <xTaskGenericCreate>
	xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED5", configMINIMAL_STACK_SIZE, (void *)LEDS[2],tskIDLE_PRIORITY, &xLED_Tasks[2] );
 800074e:	f105 0308 	add.w	r3, r5, #8
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	22c8      	movs	r2, #200	; 0xc8
 8000756:	4919      	ldr	r1, [pc, #100]	; (80007bc <main+0xd4>)
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <main+0xd8>)
 800075a:	4815      	ldr	r0, [pc, #84]	; (80007b0 <main+0xc8>)
 800075c:	9400      	str	r4, [sp, #0]
 800075e:	9402      	str	r4, [sp, #8]
 8000760:	9403      	str	r4, [sp, #12]
	xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED6", configMINIMAL_STACK_SIZE, (void *)LEDS[3],tskIDLE_PRIORITY, &xLED_Tasks[3] );
 8000762:	350c      	adds	r5, #12
	prvSetupHardware();

	/* Start the tasks defined within this file/specific to this demo. */
	xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED3", configMINIMAL_STACK_SIZE, (void *)LEDS[0],tskIDLE_PRIORITY, &xLED_Tasks[0] );
	xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED4", configMINIMAL_STACK_SIZE, (void *)LEDS[1],tskIDLE_PRIORITY, &xLED_Tasks[1] );
	xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED5", configMINIMAL_STACK_SIZE, (void *)LEDS[2],tskIDLE_PRIORITY, &xLED_Tasks[2] );
 8000764:	f000 ffbc 	bl	80016e0 <xTaskGenericCreate>
	xTaskCreate( vLEDTask, ( signed portCHAR * ) "LED6", configMINIMAL_STACK_SIZE, (void *)LEDS[3],tskIDLE_PRIORITY, &xLED_Tasks[3] );
 8000768:	22c8      	movs	r2, #200	; 0xc8
 800076a:	4916      	ldr	r1, [pc, #88]	; (80007c4 <main+0xdc>)
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <main+0xe0>)
 800076e:	4810      	ldr	r0, [pc, #64]	; (80007b0 <main+0xc8>)
 8000770:	9400      	str	r4, [sp, #0]
 8000772:	9501      	str	r5, [sp, #4]
 8000774:	9402      	str	r4, [sp, #8]
 8000776:	9403      	str	r4, [sp, #12]
 8000778:	f000 ffb2 	bl	80016e0 <xTaskGenericCreate>
	xTaskCreate( vSWITCHTask, ( signed portCHAR * ) "SWITCH", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, NULL );
 800077c:	4913      	ldr	r1, [pc, #76]	; (80007cc <main+0xe4>)
 800077e:	4814      	ldr	r0, [pc, #80]	; (80007d0 <main+0xe8>)
 8000780:	9400      	str	r4, [sp, #0]
 8000782:	22c8      	movs	r2, #200	; 0xc8
 8000784:	4623      	mov	r3, r4
 8000786:	9401      	str	r4, [sp, #4]
 8000788:	9402      	str	r4, [sp, #8]
 800078a:	9403      	str	r4, [sp, #12]
 800078c:	f000 ffa8 	bl	80016e0 <xTaskGenericCreate>
	//xTaskCreate( vMEMSTask, ( signed portCHAR * ) "MEMS", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, &xMEMS_Task );
	//xTaskCreate( vBALANCETask, ( signed portCHAR * ) "BALANCE", configMINIMAL_STACK_SIZE, NULL,tskIDLE_PRIORITY, &xBALANCE_Task );

	/* Start the scheduler. */
	vTaskStartScheduler();
 8000790:	f001 f8e0 	bl	8001954 <vTaskStartScheduler>

	/* Will only get here if there was not enough heap space to create the idle task. */
	return 0;  
}
 8000794:	4620      	mov	r0, r4
 8000796:	b005      	add	sp, #20
 8000798:	bd30      	pop	{r4, r5, pc}
 800079a:	bf00      	nop
 800079c:	2000c998 	.word	0x2000c998
 80007a0:	20000030 	.word	0x20000030
 80007a4:	2000c988 	.word	0x2000c988
 80007a8:	080021ec 	.word	0x080021ec
 80007ac:	08002208 	.word	0x08002208
 80007b0:	080006d5 	.word	0x080006d5
 80007b4:	080021f1 	.word	0x080021f1
 80007b8:	08002210 	.word	0x08002210
 80007bc:	080021f6 	.word	0x080021f6
 80007c0:	08002218 	.word	0x08002218
 80007c4:	080021fb 	.word	0x080021fb
 80007c8:	08002220 	.word	0x08002220
 80007cc:	08002200 	.word	0x08002200
 80007d0:	0800064d 	.word	0x0800064d

080007d4 <vApplicationIdleHook>:
}

/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 80007d4:	b507      	push	{r0, r1, r2, lr}
volatile size_t xFreeStackSpace;

	/* This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amout of FreeRTOS heap that 
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 80007d6:	f000 fc69 	bl	80010ac <xPortGetFreeHeapSize>
 80007da:	9001      	str	r0, [sp, #4]

	if( xFreeStackSpace > 100 )
 80007dc:	9b01      	ldr	r3, [sp, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 80007de:	bd0e      	pop	{r1, r2, r3, pc}

080007e0 <vApplicationStackOverflowHook>:
	for( ;; );
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName )
{
 80007e0:	e7fe      	b.n	80007e0 <vApplicationStackOverflowHook>
	...

080007e4 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007e6:	e003      	b.n	80007f0 <LoopCopyDataInit>

080007e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <LoopFillZerobss+0x20>)
  ldr  r3, [r3, r1]
 80007ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007ee:	3104      	adds	r1, #4

080007f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <LoopFillZerobss+0x24>)
  ldr  r3, =_edata
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <LoopFillZerobss+0x28>)
  adds  r2, r0, r1
 80007f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007f8:	d3f6      	bcc.n	80007e8 <CopyDataInit>
  ldr  r2, =_sbss
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <LoopFillZerobss+0x2c>)
  b  LoopFillZerobss
 80007fc:	e002      	b.n	8000804 <LoopFillZerobss>

080007fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000800:	f842 3b04 	str.w	r3, [r2], #4

08000804 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <LoopFillZerobss+0x30>)
  cmp  r2, r3
 8000806:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000808:	d3f9      	bcc.n	80007fe <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <LoopFillZerobss+0x34>)
 ldr     r1,[r0]
 800080c:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 800080e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 8000812:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000814:	f000 f838 	bl	8000888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000818:	f7ff fcce 	bl	80001b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800081c:	f7ff ff64 	bl	80006e8 <main>
  bx  lr    
 8000820:	4770      	bx	lr
 8000822:	0000      	.short	0x0000
 8000824:	08002280 	.word	0x08002280
 8000828:	20000000 	.word	0x20000000
 800082c:	20000024 	.word	0x20000024
 8000830:	20000028 	.word	0x20000028
 8000834:	2000c9a4 	.word	0x2000c9a4
 8000838:	e000ed88 	.word	0xe000ed88

0800083c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC_IRQHandler>

0800083e <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800083e:	4770      	bx	lr

08000840 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000840:	e7fe      	b.n	8000840 <HardFault_Handler>

08000842 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000842:	e7fe      	b.n	8000842 <MemManage_Handler>

08000844 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000844:	e7fe      	b.n	8000844 <BusFault_Handler>

08000846 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000846:	e7fe      	b.n	8000846 <UsageFault_Handler>

08000848 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8000848:	4770      	bx	lr
	...

0800084c <EXTI0_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/
/* User button handler */
void EXTI0_IRQHandler(void)
{
 800084c:	b570      	push	{r4, r5, r6, lr}
  xHigherPriorityTaskWoken = pdFALSE;
 800084e:	4c0c      	ldr	r4, [pc, #48]	; (8000880 <EXTI0_IRQHandler+0x34>)
 8000850:	2500      	movs	r5, #0
  if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 8000852:	2001      	movs	r0, #1
{
}*/
/* User button handler */
void EXTI0_IRQHandler(void)
{
  xHigherPriorityTaskWoken = pdFALSE;
 8000854:	6025      	str	r5, [r4, #0]
  if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 8000856:	f000 f977 	bl	8000b48 <EXTI_GetITStatus>
 800085a:	b178      	cbz	r0, 800087c <EXTI0_IRQHandler+0x30>
  {
    /* Set binary semaphore */
   	xSemaphoreGiveFromISR(xSemaphoreSW,&xHigherPriorityTaskWoken);
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <EXTI0_IRQHandler+0x38>)
 800085e:	4629      	mov	r1, r5
 8000860:	6818      	ldr	r0, [r3, #0]
 8000862:	4622      	mov	r2, r4
 8000864:	462b      	mov	r3, r5
 8000866:	f000 fe22 	bl	80014ae <xQueueGenericSendFromISR>

    /* Clear the Wakeup Button EXTI line pending bit */
    EXTI_ClearITPendingBit(EXTI_Line0);
 800086a:	2001      	movs	r0, #1
 800086c:	f000 f97a 	bl	8000b64 <EXTI_ClearITPendingBit>
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	b11b      	cbz	r3, 800087c <EXTI0_IRQHandler+0x30>
  }
}
 8000874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* Set binary semaphore */
   	xSemaphoreGiveFromISR(xSemaphoreSW,&xHigherPriorityTaskWoken);

    /* Clear the Wakeup Button EXTI line pending bit */
    EXTI_ClearITPendingBit(EXTI_Line0);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000878:	f000 bc68 	b.w	800114c <vPortYieldFromISR>
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	bf00      	nop
 8000880:	2000c9a0 	.word	0x2000c9a0
 8000884:	20000030 	.word	0x20000030

08000888 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000888:	4b34      	ldr	r3, [pc, #208]	; (800095c <SystemInit+0xd4>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	f042 0201 	orr.w	r2, r2, #1
 8000890:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800089c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80008a0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008a2:	492f      	ldr	r1, [pc, #188]	; (8000960 <SystemInit+0xd8>)
 80008a4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008a6:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008aa:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80008ae:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008b0:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80008b2:	9201      	str	r2, [sp, #4]
 80008b4:	9200      	str	r2, [sp, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008bc:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <SystemInit+0xd4>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80008c6:	9200      	str	r2, [sp, #0]
    StartUpCounter++;
 80008c8:	9a01      	ldr	r2, [sp, #4]
 80008ca:	3201      	adds	r2, #1
 80008cc:	9201      	str	r2, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80008ce:	9a00      	ldr	r2, [sp, #0]
 80008d0:	b91a      	cbnz	r2, 80008da <SystemInit+0x52>
 80008d2:	9a01      	ldr	r2, [sp, #4]
 80008d4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80008d8:	d1f1      	bne.n	80008be <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80008e0:	bf18      	it	ne
 80008e2:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80008e4:	9300      	str	r3, [sp, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80008e6:	9b00      	ldr	r3, [sp, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d130      	bne.n	800094e <SystemInit+0xc6>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <SystemInit+0xd4>)
 80008ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80008f6:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <SystemInit+0xdc>)
 80008f8:	6811      	ldr	r1, [r2, #0]
 80008fa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80008fe:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800090a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000912:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <SystemInit+0xe0>)
 8000916:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800091e:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <SystemInit+0xd4>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000928:	d0fa      	beq.n	8000920 <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <SystemInit+0xe4>)
 800092c:	f240 6105 	movw	r1, #1541	; 0x605
 8000930:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	f022 0203 	bic.w	r2, r2, #3
 8000938:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	f042 0202 	orr.w	r2, r2, #2
 8000940:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <SystemInit+0xd4>)
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f003 030c 	and.w	r3, r3, #12
 800094a:	2b08      	cmp	r3, #8
 800094c:	d1f9      	bne.n	8000942 <SystemInit+0xba>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <SystemInit+0xe8>)
 8000950:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000954:	609a      	str	r2, [r3, #8]
#endif
}
 8000956:	b002      	add	sp, #8
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	24003010 	.word	0x24003010
 8000964:	40007000 	.word	0x40007000
 8000968:	07405419 	.word	0x07405419
 800096c:	40023c00 	.word	0x40023c00
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <STM_EVAL_LEDToggle>:
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <STM_EVAL_LEDToggle+0x18>)
 8000976:	4906      	ldr	r1, [pc, #24]	; (8000990 <STM_EVAL_LEDToggle+0x1c>)
 8000978:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800097c:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8000980:	695a      	ldr	r2, [r3, #20]
 8000982:	ea81 0202 	eor.w	r2, r1, r2
 8000986:	615a      	str	r2, [r3, #20]
}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000004 	.word	0x20000004
 8000990:	0800222e 	.word	0x0800222e

08000994 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000994:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <STM_EVAL_PBInit+0x8c>)
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000998:	b086      	sub	sp, #24
 800099a:	4604      	mov	r4, r0
 800099c:	460d      	mov	r5, r1
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 800099e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80009a2:	2101      	movs	r1, #1
 80009a4:	f000 f93e 	bl	8000c24 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80009a8:	2101      	movs	r1, #1
 80009aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009ae:	f000 f951 	bl	8000c54 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <STM_EVAL_PBInit+0x90>)
 80009b4:	a906      	add	r1, sp, #24
 80009b6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80009ba:	f841 3d0c 	str.w	r3, [r1, #-12]!
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <STM_EVAL_PBInit+0x94>)
  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80009c0:	2600      	movs	r6, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80009c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80009c6:	f88d 6010 	strb.w	r6, [sp, #16]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80009ca:	f88d 6013 	strb.w	r6, [sp, #19]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80009ce:	f000 f8cf 	bl	8000b70 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 80009d2:	2d01      	cmp	r5, #1
 80009d4:	d121      	bne.n	8000a1a <STM_EVAL_PBInit+0x86>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <STM_EVAL_PBInit+0x98>)
 80009d8:	5d18      	ldrb	r0, [r3, r4]
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <STM_EVAL_PBInit+0x9c>)
 80009dc:	5d19      	ldrb	r1, [r3, r4]
 80009de:	f000 f945 	bl	8000c6c <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <STM_EVAL_PBInit+0xa0>)
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80009e4:	f88d 6008 	strb.w	r6, [sp, #8]
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 80009e8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80009ec:	f88d 500a 	strb.w	r5, [sp, #10]
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 80009f0:	9301      	str	r3, [sp, #4]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);
 80009f2:	a801      	add	r0, sp, #4
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 80009f4:	2308      	movs	r3, #8
 80009f6:	f88d 3009 	strb.w	r3, [sp, #9]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);
 80009fa:	f000 f867 	bl	8000acc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <STM_EVAL_PBInit+0xa4>)
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a00:	f88d 5017 	strb.w	r5, [sp, #23]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000a04:	5d1b      	ldrb	r3, [r3, r4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
 8000a06:	a805      	add	r0, sp, #20
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000a08:	f88d 3014 	strb.w	r3, [sp, #20]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	f88d 3015 	strb.w	r3, [sp, #21]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000a12:	f88d 3016 	strb.w	r3, [sp, #22]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
 8000a16:	f000 f81b 	bl	8000a50 <NVIC_Init>
  }
}
 8000a1a:	b006      	add	sp, #24
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
 8000a1e:	bf00      	nop
 8000a20:	08002228 	.word	0x08002228
 8000a24:	0800222c 	.word	0x0800222c
 8000a28:	20000014 	.word	0x20000014
 8000a2c:	08002236 	.word	0x08002236
 8000a30:	08002237 	.word	0x08002237
 8000a34:	0800223a 	.word	0x0800223a
 8000a38:	08002238 	.word	0x08002238

08000a3c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000a3c:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 8000a40:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <NVIC_PriorityGroupConfig+0x10>)
 8000a42:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 8000a46:	60d8      	str	r0, [r3, #12]
}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a50:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000a52:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a54:	b1fb      	cbz	r3, 8000a96 <NVIC_Init+0x46>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <NVIC_Init+0x60>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a58:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a5a:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000a5c:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a64:	0a1b      	lsrs	r3, r3, #8
    tmppre = (0x4 - tmppriority);
 8000a66:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a6a:	b2c9      	uxtb	r1, r1
 8000a6c:	fa12 f101 	lsls.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000a70:	220f      	movs	r2, #15
 8000a72:	411a      	asrs	r2, r3

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a74:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000a76:	4022      	ands	r2, r4
 8000a78:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <NVIC_Init+0x64>)
 8000a7c:	7801      	ldrb	r1, [r0, #0]
 8000a7e:	18cb      	adds	r3, r1, r3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8000a80:	0112      	lsls	r2, r2, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a82:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a86:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a88:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a8a:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a8c:	f003 031f 	and.w	r3, r3, #31
 8000a90:	fa12 f303 	lsls.w	r3, r2, r3
 8000a94:	e007      	b.n	8000aa6 <NVIC_Init+0x56>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a96:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a98:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a9a:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aa4:	3120      	adds	r1, #32
 8000aa6:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <NVIC_Init+0x64>)
 8000aa8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000aac:	bd10      	pop	{r4, pc}
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000ab8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000abc:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000ac0:	4b01      	ldr	r3, [pc, #4]	; (8000ac8 <NVIC_SetVectorTable+0x10>)
 8000ac2:	4301      	orrs	r1, r0
 8000ac4:	6099      	str	r1, [r3, #8]
}
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000acc:	7983      	ldrb	r3, [r0, #6]
 8000ace:	6801      	ldr	r1, [r0, #0]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000ad0:	b510      	push	{r4, lr}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d02b      	beq.n	8000b2e <EXTI_Init+0x62>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <EXTI_Init+0x78>)
 8000ad8:	681c      	ldr	r4, [r3, #0]
 8000ada:	43ca      	mvns	r2, r1
 8000adc:	ea02 0404 	and.w	r4, r2, r4
 8000ae0:	601c      	str	r4, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ae2:	685c      	ldr	r4, [r3, #4]
 8000ae4:	4022      	ands	r2, r4
 8000ae6:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000ae8:	7902      	ldrb	r2, [r0, #4]
 8000aea:	18d2      	adds	r2, r2, r3

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000aec:	6814      	ldr	r4, [r2, #0]
 8000aee:	ea44 0101 	orr.w	r1, r4, r1
 8000af2:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000af4:	6802      	ldr	r2, [r0, #0]
 8000af6:	689c      	ldr	r4, [r3, #8]
 8000af8:	43d1      	mvns	r1, r2
 8000afa:	ea01 0404 	and.w	r4, r1, r4
 8000afe:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000b00:	68dc      	ldr	r4, [r3, #12]
 8000b02:	4021      	ands	r1, r4
 8000b04:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000b06:	7941      	ldrb	r1, [r0, #5]
 8000b08:	2910      	cmp	r1, #16
 8000b0a:	d107      	bne.n	8000b1c <EXTI_Init+0x50>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000b0c:	6899      	ldr	r1, [r3, #8]
 8000b0e:	4311      	orrs	r1, r2
 8000b10:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000b12:	68d9      	ldr	r1, [r3, #12]
 8000b14:	ea41 0202 	orr.w	r2, r1, r2
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	bd10      	pop	{r4, pc}
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000b1c:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8000b20:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000b24:	6819      	ldr	r1, [r3, #0]
 8000b26:	ea41 0202 	orr.w	r2, r1, r2
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000b2e:	7903      	ldrb	r3, [r0, #4]
 8000b30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b34:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	ea22 0101 	bic.w	r1, r2, r1
 8000b3e:	6019      	str	r1, [r3, #0]
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	bf00      	nop
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <EXTI_GetITStatus+0x18>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4003      	ands	r3, r0
 8000b50:	d004      	beq.n	8000b5c <EXTI_GetITStatus+0x14>
  {
    bitstatus = SET;
 8000b52:	4210      	tst	r0, r2
 8000b54:	bf0c      	ite	eq
 8000b56:	2000      	moveq	r0, #0
 8000b58:	2001      	movne	r0, #1
 8000b5a:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8000b5c:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 8000b5e:	4770      	bx	lr
 8000b60:	40013c00 	.word	0x40013c00

08000b64 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000b64:	4b01      	ldr	r3, [pc, #4]	; (8000b6c <EXTI_ClearITPendingBit+0x8>)
 8000b66:	6158      	str	r0, [r3, #20]
}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40013c00 	.word	0x40013c00

08000b70 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b74:	2300      	movs	r3, #0
 8000b76:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b78:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000b7a:	2401      	movs	r4, #1
 8000b7c:	4094      	lsls	r4, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b7e:	ea04 0507 	and.w	r5, r4, r7

    if (currentpin == pos)
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	d131      	bne.n	8000bea <GPIO_Init+0x7a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b86:	2403      	movs	r4, #3
 8000b88:	6806      	ldr	r6, [r0, #0]
 8000b8a:	409c      	lsls	r4, r3
 8000b8c:	43e4      	mvns	r4, r4
 8000b8e:	ea04 0606 	and.w	r6, r4, r6
 8000b92:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b94:	790e      	ldrb	r6, [r1, #4]
 8000b96:	f8d0 c000 	ldr.w	ip, [r0]
 8000b9a:	fa06 f803 	lsl.w	r8, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b9e:	3e01      	subs	r6, #1
 8000ba0:	b2f6      	uxtb	r6, r6
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ba2:	ea48 0c0c 	orr.w	ip, r8, ip

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ba6:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ba8:	f8c0 c000 	str.w	ip, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bac:	d815      	bhi.n	8000bda <GPIO_Init+0x6a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000bae:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000bb0:	f891 c005 	ldrb.w	ip, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000bb4:	ea04 0606 	and.w	r6, r4, r6
 8000bb8:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000bba:	6886      	ldr	r6, [r0, #8]
 8000bbc:	fa0c fc03 	lsl.w	ip, ip, r3
 8000bc0:	ea4c 0606 	orr.w	r6, ip, r6
 8000bc4:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000bc6:	6846      	ldr	r6, [r0, #4]
 8000bc8:	ea26 0505 	bic.w	r5, r6, r5
 8000bcc:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000bce:	798d      	ldrb	r5, [r1, #6]
 8000bd0:	6846      	ldr	r6, [r0, #4]
 8000bd2:	4095      	lsls	r5, r2
 8000bd4:	b2ad      	uxth	r5, r5
 8000bd6:	4335      	orrs	r5, r6
 8000bd8:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000bda:	68c5      	ldr	r5, [r0, #12]
 8000bdc:	402c      	ands	r4, r5
 8000bde:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000be0:	79cc      	ldrb	r4, [r1, #7]
 8000be2:	68c5      	ldr	r5, [r0, #12]
 8000be4:	409c      	lsls	r4, r3
 8000be6:	432c      	orrs	r4, r5
 8000be8:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000bea:	3201      	adds	r2, #1
 8000bec:	3302      	adds	r3, #2
 8000bee:	2a10      	cmp	r2, #16
 8000bf0:	d1c3      	bne.n	8000b7a <GPIO_Init+0xa>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000bf6 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000bf6:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000bfa:	08c9      	lsrs	r1, r1, #3
 8000bfc:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000bfe:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000c00:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000c02:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8000c06:	240f      	movs	r4, #15
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	ea25 0404 	bic.w	r4, r5, r4
 8000c0e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000c12:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000c16:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000c1a:	ea43 0404 	orr.w	r4, r3, r4
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000c1e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 8000c22:	bd30      	pop	{r4, r5, pc}

08000c24 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <RCC_AHB1PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c26:	b111      	cbz	r1, 8000c2e <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c2a:	4310      	orrs	r0, r2
 8000c2c:	e002      	b.n	8000c34 <RCC_AHB1PeriphClockCmd+0x10>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c30:	ea22 0000 	bic.w	r0, r2, r0
 8000c34:	6318      	str	r0, [r3, #48]	; 0x30
 8000c36:	4770      	bx	lr
 8000c38:	40023800 	.word	0x40023800

08000c3c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <RCC_APB1PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c3e:	b111      	cbz	r1, 8000c46 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c42:	4310      	orrs	r0, r2
 8000c44:	e002      	b.n	8000c4c <RCC_APB1PeriphClockCmd+0x10>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c48:	ea22 0000 	bic.w	r0, r2, r0
 8000c4c:	6418      	str	r0, [r3, #64]	; 0x40
 8000c4e:	4770      	bx	lr
 8000c50:	40023800 	.word	0x40023800

08000c54 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <RCC_APB2PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c56:	b111      	cbz	r1, 8000c5e <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c5a:	4310      	orrs	r0, r2
 8000c5c:	e002      	b.n	8000c64 <RCC_APB2PeriphClockCmd+0x10>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c60:	ea22 0000 	bic.w	r0, r2, r0
 8000c64:	6458      	str	r0, [r3, #68]	; 0x44
 8000c66:	4770      	bx	lr
 8000c68:	40023800 	.word	0x40023800

08000c6c <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000c6c:	f001 0203 	and.w	r2, r1, #3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000c70:	0889      	lsrs	r1, r1, #2
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <SYSCFG_EXTILineConfig+0x30>)
 8000c74:	3102      	adds	r1, #2
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000c76:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000c78:	0092      	lsls	r2, r2, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000c7a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000c7e:	240f      	movs	r4, #15
 8000c80:	4094      	lsls	r4, r2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000c82:	ea25 0404 	bic.w	r4, r5, r4
 8000c86:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000c8a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8000c8e:	fa10 f202 	lsls.w	r2, r0, r2
 8000c92:	ea42 0404 	orr.w	r4, r2, r4
 8000c96:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
}
 8000c9a:	bd30      	pop	{r4, r5, pc}
 8000c9c:	40013800 	.word	0x40013800

08000ca0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <TIM_TimeBaseInit+0x70>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000ca2:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000ca4:	4290      	cmp	r0, r2
 8000ca6:	d00e      	beq.n	8000cc6 <TIM_TimeBaseInit+0x26>
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <TIM_TimeBaseInit+0x74>)
 8000caa:	4290      	cmp	r0, r2
 8000cac:	d00b      	beq.n	8000cc6 <TIM_TimeBaseInit+0x26>
 8000cae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cb2:	d008      	beq.n	8000cc6 <TIM_TimeBaseInit+0x26>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000cb4:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <TIM_TimeBaseInit+0x78>)
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d005      	beq.n	8000cc6 <TIM_TimeBaseInit+0x26>
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <TIM_TimeBaseInit+0x7c>)
 8000cbc:	4290      	cmp	r0, r2
 8000cbe:	d002      	beq.n	8000cc6 <TIM_TimeBaseInit+0x26>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000cc0:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <TIM_TimeBaseInit+0x80>)
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	d106      	bne.n	8000cd4 <TIM_TimeBaseInit+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000cc6:	f64f 728f 	movw	r2, #65423	; 0xff8f
 8000cca:	ea03 0202 	and.w	r2, r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000cce:	884b      	ldrh	r3, [r1, #2]
 8000cd0:	ea42 0303 	orr.w	r3, r2, r3
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <TIM_TimeBaseInit+0x84>)
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d009      	beq.n	8000cee <TIM_TimeBaseInit+0x4e>
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <TIM_TimeBaseInit+0x88>)
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	d006      	beq.n	8000cee <TIM_TimeBaseInit+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000ce0:	f64f 42ff 	movw	r2, #64767	; 0xfcff
 8000ce4:	ea03 0202 	and.w	r2, r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000ce8:	890b      	ldrh	r3, [r1, #8]
 8000cea:	ea42 0303 	orr.w	r3, r2, r3
  }

  TIMx->CR1 = tmpcr1;
 8000cee:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000cf0:	684b      	ldr	r3, [r1, #4]
 8000cf2:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000cf4:	880b      	ldrh	r3, [r1, #0]
 8000cf6:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <TIM_TimeBaseInit+0x70>)
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d002      	beq.n	8000d04 <TIM_TimeBaseInit+0x64>
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <TIM_TimeBaseInit+0x74>)
 8000d00:	4298      	cmp	r0, r3
 8000d02:	d101      	bne.n	8000d08 <TIM_TimeBaseInit+0x68>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000d04:	7a8b      	ldrb	r3, [r1, #10]
 8000d06:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000d08:	2301      	movs	r3, #1
 8000d0a:	8283      	strh	r3, [r0, #20]
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40010000 	.word	0x40010000
 8000d14:	40010400 	.word	0x40010400
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40000800 	.word	0x40000800
 8000d20:	40000c00 	.word	0x40000c00
 8000d24:	40001000 	.word	0x40001000
 8000d28:	40001400 	.word	0x40001400

08000d2c <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d2c:	b121      	cbz	r1, 8000d38 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000d2e:	8803      	ldrh	r3, [r0, #0]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d36:	e004      	b.n	8000d42 <TIM_ARRPreloadConfig+0x16>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8000d38:	8803      	ldrh	r3, [r0, #0]
 8000d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d3e:	041b      	lsls	r3, r3, #16
 8000d40:	0c1b      	lsrs	r3, r3, #16
 8000d42:	8003      	strh	r3, [r0, #0]
 8000d44:	4770      	bx	lr

08000d46 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d46:	b121      	cbz	r1, 8000d52 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000d48:	8803      	ldrh	r3, [r0, #0]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	e004      	b.n	8000d5c <TIM_Cmd+0x16>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000d52:	8803      	ldrh	r3, [r0, #0]
 8000d54:	f023 0301 	bic.w	r3, r3, #1
 8000d58:	041b      	lsls	r3, r3, #16
 8000d5a:	0c1b      	lsrs	r3, r3, #16
 8000d5c:	8003      	strh	r3, [r0, #0]
 8000d5e:	4770      	bx	lr

08000d60 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000d60:	8c03      	ldrh	r3, [r0, #32]
 8000d62:	f023 0301 	bic.w	r3, r3, #1
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	0c1b      	lsrs	r3, r3, #16
 8000d6a:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000d6c:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d6e:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000d70:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000d72:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000d74:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000d76:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8000d78:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8000d7c:	0412      	lsls	r2, r2, #16
 8000d7e:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000d80:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000d82:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8000d84:	f023 0302 	bic.w	r3, r3, #2
 8000d88:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000d8a:	ea46 0505 	orr.w	r5, r6, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8000d8e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000d90:	b2ad      	uxth	r5, r5
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000d92:	ea45 0303 	orr.w	r3, r5, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000d96:	4d11      	ldr	r5, [pc, #68]	; (8000ddc <TIM_OC1Init+0x7c>)
 8000d98:	42a8      	cmp	r0, r5
 8000d9a:	d002      	beq.n	8000da2 <TIM_OC1Init+0x42>
 8000d9c:	4d10      	ldr	r5, [pc, #64]	; (8000de0 <TIM_OC1Init+0x80>)
 8000d9e:	42a8      	cmp	r0, r5
 8000da0:	d115      	bne.n	8000dce <TIM_OC1Init+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8000da2:	f64f 75f7 	movw	r5, #65527	; 0xfff7
 8000da6:	ea03 0505 	and.w	r5, r3, r5
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000daa:	89cb      	ldrh	r3, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000dac:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000dae:	431d      	orrs	r5, r3
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8000db0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000db4:	ea05 0303 	and.w	r3, r5, r3
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000db8:	888d      	ldrh	r5, [r1, #4]
 8000dba:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8000dbc:	f64f 45ff 	movw	r5, #64767	; 0xfcff
 8000dc0:	ea04 0505 	and.w	r5, r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000dc4:	8a0c      	ldrh	r4, [r1, #16]
 8000dc6:	ea46 0404 	orr.w	r4, r6, r4
 8000dca:	b2a4      	uxth	r4, r4
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000dcc:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000dce:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000dd0:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8000dd2:	688a      	ldr	r2, [r1, #8]
 8000dd4:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000dd6:	8403      	strh	r3, [r0, #32]
}
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	40010400 	.word	0x40010400

08000de4 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000de4:	8c03      	ldrh	r3, [r0, #32]
 8000de6:	f023 0310 	bic.w	r3, r3, #16
 8000dea:	041b      	lsls	r3, r3, #16
 8000dec:	0c1b      	lsrs	r3, r3, #16
 8000dee:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8000df0:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000df2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000df4:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000df6:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000df8:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8000dfa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8000dfe:	0412      	lsls	r2, r2, #16
 8000e00:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8000e02:	f023 0320 	bic.w	r3, r3, #32
 8000e06:	041b      	lsls	r3, r3, #16
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000e08:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000e0c:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8000e0e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000e10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000e14:	884d      	ldrh	r5, [r1, #2]
 8000e16:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000e1a:	4d12      	ldr	r5, [pc, #72]	; (8000e64 <TIM_OC2Init+0x80>)
 8000e1c:	42a8      	cmp	r0, r5
 8000e1e:	d002      	beq.n	8000e26 <TIM_OC2Init+0x42>
 8000e20:	4d11      	ldr	r5, [pc, #68]	; (8000e68 <TIM_OC2Init+0x84>)
 8000e22:	42a8      	cmp	r0, r5
 8000e24:	d117      	bne.n	8000e56 <TIM_OC2Init+0x72>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8000e26:	f64f 757f 	movw	r5, #65407	; 0xff7f
 8000e2a:	ea03 0505 	and.w	r5, r3, r5
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000e2e:	89cb      	ldrh	r3, [r1, #14]
 8000e30:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8000e34:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000e38:	ea05 0303 	and.w	r3, r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000e3c:	888d      	ldrh	r5, [r1, #4]
 8000e3e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8000e42:	f24f 35ff 	movw	r5, #62463	; 0xf3ff
 8000e46:	ea04 0505 	and.w	r5, r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000e4a:	8a0c      	ldrh	r4, [r1, #16]
 8000e4c:	ea45 0584 	orr.w	r5, r5, r4, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000e50:	8a4c      	ldrh	r4, [r1, #18]
 8000e52:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e56:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000e58:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000e5a:	688a      	ldr	r2, [r1, #8]
 8000e5c:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e5e:	8403      	strh	r3, [r0, #32]
}
 8000e60:	bd30      	pop	{r4, r5, pc}
 8000e62:	bf00      	nop
 8000e64:	40010000 	.word	0x40010000
 8000e68:	40010400 	.word	0x40010400

08000e6c <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000e6c:	8c03      	ldrh	r3, [r0, #32]
 8000e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e72:	041b      	lsls	r3, r3, #16
 8000e74:	0c1b      	lsrs	r3, r3, #16
 8000e76:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e78:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000e7a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e7c:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e7e:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000e80:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8000e82:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8000e86:	0412      	lsls	r2, r2, #16
 8000e88:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8000e8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e8e:	041b      	lsls	r3, r3, #16
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000e90:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000e92:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8000e94:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000e96:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000e9a:	884d      	ldrh	r5, [r1, #2]
 8000e9c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000ea0:	4d11      	ldr	r5, [pc, #68]	; (8000ee8 <TIM_OC3Init+0x7c>)
 8000ea2:	42a8      	cmp	r0, r5
 8000ea4:	d002      	beq.n	8000eac <TIM_OC3Init+0x40>
 8000ea6:	4d11      	ldr	r5, [pc, #68]	; (8000eec <TIM_OC3Init+0x80>)
 8000ea8:	42a8      	cmp	r0, r5
 8000eaa:	d117      	bne.n	8000edc <TIM_OC3Init+0x70>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8000eac:	f24f 75ff 	movw	r5, #63487	; 0xf7ff
 8000eb0:	ea03 0505 	and.w	r5, r3, r5
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000eb4:	89cb      	ldrh	r3, [r1, #14]
 8000eb6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8000eba:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000ebe:	ea05 0303 	and.w	r3, r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000ec2:	888d      	ldrh	r5, [r1, #4]
 8000ec4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8000ec8:	f64c 75ff 	movw	r5, #53247	; 0xcfff
 8000ecc:	ea04 0505 	and.w	r5, r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000ed0:	8a0c      	ldrh	r4, [r1, #16]
 8000ed2:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000ed6:	8a4c      	ldrh	r4, [r1, #18]
 8000ed8:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000edc:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000ede:	8382      	strh	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000ee0:	688a      	ldr	r2, [r1, #8]
 8000ee2:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ee4:	8403      	strh	r3, [r0, #32]
}
 8000ee6:	bd30      	pop	{r4, r5, pc}
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	40010400 	.word	0x40010400

08000ef0 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000ef0:	8c03      	ldrh	r3, [r0, #32]
 8000ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ef6:	041b      	lsls	r3, r3, #16
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000efc:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000efe:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000f00:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000f02:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000f04:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8000f06:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8000f0a:	0412      	lsls	r2, r2, #16
 8000f0c:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8000f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f12:	041b      	lsls	r3, r3, #16
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000f14:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000f18:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8000f1a:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000f1c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000f20:	884d      	ldrh	r5, [r1, #2]
 8000f22:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000f26:	4d09      	ldr	r5, [pc, #36]	; (8000f4c <TIM_OC4Init+0x5c>)
 8000f28:	42a8      	cmp	r0, r5
 8000f2a:	d002      	beq.n	8000f32 <TIM_OC4Init+0x42>
 8000f2c:	4d08      	ldr	r5, [pc, #32]	; (8000f50 <TIM_OC4Init+0x60>)
 8000f2e:	42a8      	cmp	r0, r5
 8000f30:	d106      	bne.n	8000f40 <TIM_OC4Init+0x50>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8000f32:	f64b 75ff 	movw	r5, #49151	; 0xbfff
 8000f36:	ea04 0505 	and.w	r5, r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000f3a:	8a0c      	ldrh	r4, [r1, #16]
 8000f3c:	ea45 1484 	orr.w	r4, r5, r4, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f40:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000f42:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000f44:	688a      	ldr	r2, [r1, #8]
 8000f46:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f48:	8403      	strh	r3, [r0, #32]
}
 8000f4a:	bd30      	pop	{r4, r5, pc}
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40010400 	.word	0x40010400

08000f54 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000f54:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8000f56:	f023 0308 	bic.w	r3, r3, #8
 8000f5a:	041b      	lsls	r3, r3, #16
 8000f5c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000f5e:	ea41 0303 	orr.w	r3, r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000f62:	8303      	strh	r3, [r0, #24]
}
 8000f64:	4770      	bx	lr

08000f66 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000f66:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8000f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000f70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000f74:	8303      	strh	r3, [r0, #24]
}
 8000f76:	4770      	bx	lr

08000f78 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000f78:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8000f7a:	f023 0308 	bic.w	r3, r3, #8
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000f82:	ea41 0303 	orr.w	r3, r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000f86:	8383      	strh	r3, [r0, #28]
}
 8000f88:	4770      	bx	lr

08000f8a <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000f8a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8000f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000f94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000f98:	8383      	strh	r3, [r0, #28]
}
 8000f9a:	4770      	bx	lr

08000f9c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8000f9c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8000f9e:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8000fa4:	b2a4      	uxth	r4, r4
 8000fa6:	ea24 0303 	bic.w	r3, r4, r3
 8000faa:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8000fac:	8c03      	ldrh	r3, [r0, #32]
 8000fae:	fa12 f101 	lsls.w	r1, r2, r1
 8000fb2:	ea41 0303 	orr.w	r3, r1, r3
 8000fb6:	8403      	strh	r3, [r0, #32]
}
 8000fb8:	bd10      	pop	{r4, pc}
	...

08000fbc <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000fbc:	b570      	push	{r4, r5, r6, lr}
 8000fbe:	4605      	mov	r5, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8000fc0:	f000 fcfa 	bl	80019b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8000fc4:	4824      	ldr	r0, [pc, #144]	; (8001058 <pvPortMalloc+0x9c>)
 8000fc6:	6801      	ldr	r1, [r0, #0]
 8000fc8:	b961      	cbnz	r1, 8000fe4 <pvPortMalloc+0x28>
		{
			prvHeapInit();
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <pvPortMalloc+0xa0>)
 8000fcc:	4a24      	ldr	r2, [pc, #144]	; (8001060 <pvPortMalloc+0xa4>)
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	6051      	str	r1, [r2, #4]
 8000fd2:	4a24      	ldr	r2, [pc, #144]	; (8001064 <pvPortMalloc+0xa8>)
 8000fd4:	f44f 4448 	mov.w	r4, #51200	; 0xc800
 8000fd8:	605c      	str	r4, [r3, #4]
 8000fda:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
 8000fdc:	2301      	movs	r3, #1
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
 8000fde:	6054      	str	r4, [r2, #4]
 8000fe0:	6011      	str	r1, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
 8000fe2:	6003      	str	r3, [r0, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8000fe4:	b135      	cbz	r5, 8000ff4 <pvPortMalloc+0x38>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8000fe6:	3510      	adds	r5, #16

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000fe8:	f015 0f07 	tst.w	r5, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fec:	bf1c      	itt	ne
 8000fee:	f025 0507 	bicne.w	r5, r5, #7
 8000ff2:	3508      	addne	r5, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
 8000ff4:	1e6a      	subs	r2, r5, #1
 8000ff6:	f24c 73fe 	movw	r3, #51198	; 0xc7fe
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d827      	bhi.n	800104e <pvPortMalloc+0x92>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <pvPortMalloc+0xa4>)
 8001000:	6813      	ldr	r3, [r2, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
 8001002:	e001      	b.n	8001008 <pvPortMalloc+0x4c>
 8001004:	461a      	mov	r2, r3
 8001006:	4603      	mov	r3, r0
 8001008:	6859      	ldr	r1, [r3, #4]
 800100a:	42a9      	cmp	r1, r5
 800100c:	d202      	bcs.n	8001014 <pvPortMalloc+0x58>
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	2800      	cmp	r0, #0
 8001012:	d1f7      	bne.n	8001004 <pvPortMalloc+0x48>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8001014:	4813      	ldr	r0, [pc, #76]	; (8001064 <pvPortMalloc+0xa8>)
 8001016:	4283      	cmp	r3, r0
 8001018:	d019      	beq.n	800104e <pvPortMalloc+0x92>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800101a:	6814      	ldr	r4, [r2, #0]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800101c:	6818      	ldr	r0, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800101e:	1b49      	subs	r1, r1, r5
			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8001020:	3410      	adds	r4, #16
				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001022:	2920      	cmp	r1, #32
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001024:	6010      	str	r0, [r2, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001026:	d90c      	bls.n	8001042 <pvPortMalloc+0x86>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 8001028:	195a      	adds	r2, r3, r5

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800102a:	6051      	str	r1, [r2, #4]
					pxBlock->xBlockSize = xWantedSize;
 800102c:	605d      	str	r5, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800102e:	6855      	ldr	r5, [r2, #4]
 8001030:	490b      	ldr	r1, [pc, #44]	; (8001060 <pvPortMalloc+0xa4>)
 8001032:	e000      	b.n	8001036 <pvPortMalloc+0x7a>
 8001034:	4601      	mov	r1, r0
 8001036:	6808      	ldr	r0, [r1, #0]
 8001038:	6846      	ldr	r6, [r0, #4]
 800103a:	42ae      	cmp	r6, r5
 800103c:	d3fa      	bcc.n	8001034 <pvPortMalloc+0x78>
 800103e:	6010      	str	r0, [r2, #0]
 8001040:	600a      	str	r2, [r1, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001042:	4a09      	ldr	r2, [pc, #36]	; (8001068 <pvPortMalloc+0xac>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	6811      	ldr	r1, [r2, #0]
 8001048:	1acb      	subs	r3, r1, r3
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e000      	b.n	8001050 <pvPortMalloc+0x94>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800104e:	2400      	movs	r4, #0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
 8001050:	f000 fd34 	bl	8001abc <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8001054:	4620      	mov	r0, r4
 8001056:	bd70      	pop	{r4, r5, r6, pc}
 8001058:	2000c848 	.word	0x2000c848
 800105c:	20000038 	.word	0x20000038
 8001060:	2000c838 	.word	0x2000c838
 8001064:	2000c840 	.word	0x2000c840
 8001068:	20000018 	.word	0x20000018

0800106c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800106c:	b570      	push	{r4, r5, r6, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
 800106e:	4604      	mov	r4, r0
 8001070:	b1b0      	cbz	r0, 80010a0 <vPortFree+0x34>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8001072:	f1a0 0510 	sub.w	r5, r0, #16

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
 8001076:	f000 fc9f 	bl	80019b8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 800107a:	6869      	ldr	r1, [r5, #4]
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <vPortFree+0x38>)
 800107e:	e000      	b.n	8001082 <vPortFree+0x16>
 8001080:	4613      	mov	r3, r2
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	6850      	ldr	r0, [r2, #4]
 8001086:	4288      	cmp	r0, r1
 8001088:	d3fa      	bcc.n	8001080 <vPortFree+0x14>
 800108a:	f844 2c10 	str.w	r2, [r4, #-16]
 800108e:	601d      	str	r5, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <vPortFree+0x3c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	1851      	adds	r1, r2, r1
 8001096:	6019      	str	r1, [r3, #0]
		}
		xTaskResumeAll();
	}
}
 8001098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
		}
		xTaskResumeAll();
 800109c:	f000 bd0e 	b.w	8001abc <xTaskResumeAll>
 80010a0:	bd70      	pop	{r4, r5, r6, pc}
 80010a2:	bf00      	nop
 80010a4:	2000c838 	.word	0x2000c838
 80010a8:	20000018 	.word	0x20000018

080010ac <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
 80010ac:	4b01      	ldr	r3, [pc, #4]	; (80010b4 <xPortGetFreeHeapSize+0x8>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000018 	.word	0x20000018

080010b8 <pxPortInitialiseStack>:
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80010b8:	1f03      	subs	r3, r0, #4

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 80010ba:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80010bc:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 80010c0:	f840 4c04 	str.w	r4, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 80010c4:	f843 1c04 	str.w	r1, [r3, #-4]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
 80010c8:	2100      	movs	r1, #0
 80010ca:	f843 1c08 	str.w	r1, [r3, #-8]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 80010ce:	f843 2c1c 	str.w	r2, [r3, #-28]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80010d2:	f1a3 003c 	sub.w	r0, r3, #60	; 0x3c
 80010d6:	bd10      	pop	{r4, pc}

080010d8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <pxCurrentTCBConst2>)
 80010da:	6819      	ldr	r1, [r3, #0]
 80010dc:	6808      	ldr	r0, [r1, #0]
 80010de:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010e2:	f380 8809 	msr	PSP, r0
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	f380 8811 	msr	BASEPRI, r0
 80010ee:	f04e 0e0d 	orr.w	lr, lr, #13
 80010f2:	4770      	bx	lr

080010f4 <pxCurrentTCBConst2>:
 80010f4:	2000c904 	.word	0x2000c904

080010f8 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <vPortStartFirstTask+0x10>)
 80010fa:	6800      	ldr	r0, [r0, #0]
 80010fc:	6800      	ldr	r0, [r0, #0]
 80010fe:	f380 8808 	msr	MSP, r0
 8001102:	b662      	cpsie	i
 8001104:	df00      	svc	0
 8001106:	bf00      	nop
 8001108:	e000ed08 	.word	0xe000ed08

0800110c <xPortStartScheduler>:
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <xPortStartScheduler+0x30>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8001114:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8001116:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800111e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <xPortStartScheduler+0x34>)
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <xPortStartScheduler+0x38>)
 8001124:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8001126:	2207      	movs	r2, #7
 8001128:	f843 2c04 	str.w	r2, [r3, #-4]
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <xPortStartScheduler+0x3c>)
 800112e:	2400      	movs	r4, #0
 8001130:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8001132:	f7ff ffe1 	bl	80010f8 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
}
 8001136:	4620      	mov	r0, r4
 8001138:	bd10      	pop	{r4, pc}
 800113a:	bf00      	nop
 800113c:	e000ed20 	.word	0xe000ed20
 8001140:	e000e014 	.word	0xe000e014
 8001144:	0002903f 	.word	0x0002903f
 8001148:	2000001c 	.word	0x2000001c

0800114c <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800114c:	4b02      	ldr	r3, [pc, #8]	; (8001158 <vPortYieldFromISR+0xc>)
 800114e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed04 	.word	0xe000ed04

0800115c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 800115c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001160:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <vPortEnterCritical+0x14>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	3201      	adds	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000001c 	.word	0x2000001c

08001174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	uxCriticalNesting--;
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <vPortExitCritical+0x14>)
 8001176:	6813      	ldr	r3, [r2, #0]
 8001178:	3b01      	subs	r3, #1
 800117a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800117c:	b91b      	cbnz	r3, 8001186 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	f380 8811 	msr	BASEPRI, r0
 8001186:	4770      	bx	lr
 8001188:	2000001c 	.word	0x2000001c

0800118c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800118c:	f3ef 8009 	mrs	r0, PSP
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <pxCurrentTCBConst>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001198:	6010      	str	r0, [r2, #0]
 800119a:	e92d 4008 	stmdb	sp!, {r3, lr}
 800119e:	f04f 0050 	mov.w	r0, #80	; 0x50
 80011a2:	f380 8811 	msr	BASEPRI, r0
 80011a6:	f000 fd3d 	bl	8001c24 <vTaskSwitchContext>
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	f380 8811 	msr	BASEPRI, r0
 80011b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	6808      	ldr	r0, [r1, #0]
 80011ba:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80011be:	f380 8809 	msr	PSP, r0
 80011c2:	4770      	bx	lr

080011c4 <pxCurrentTCBConst>:
 80011c4:	2000c904 	.word	0x2000c904

080011c8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80011c8:	b508      	push	{r3, lr}
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <SysTick_Handler+0x20>)
 80011cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d0:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80011d2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80011d6:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 80011da:	f000 fc01 	bl	80019e0 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	f380 8811 	msr	BASEPRI, r0
}
 80011e6:	bd08      	pop	{r3, pc}
 80011e8:	e000ed04 	.word	0xe000ed04

080011ec <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 80011ec:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	6082      	str	r2, [r0, #8]
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 80011f6:	6043      	str	r3, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 80011f8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 80011fa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	6003      	str	r3, [r0, #0]
}
 8001200:	4770      	bx	lr

08001202 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001202:	2300      	movs	r3, #0
 8001204:	6103      	str	r3, [r0, #16]
}
 8001206:	4770      	bx	lr

08001208 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8001208:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
 800120a:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 800120c:	608b      	str	r3, [r1, #8]
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;

	pxNewListItem->pxNext = pxIndex->pxNext;
 800120e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001214:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001216:	6803      	ldr	r3, [r0, #0]

	pxNewListItem->pxNext = pxIndex->pxNext;
	pxNewListItem->pxPrevious = pxList->pxIndex;
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8001218:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800121a:	3301      	adds	r3, #1
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800121c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800121e:	6003      	str	r3, [r0, #0]
}
 8001220:	4770      	bx	lr

08001222 <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8001222:	680a      	ldr	r2, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001224:	f1b2 3fff 	cmp.w	r2, #4294967295
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8001228:	b510      	push	{r4, lr}
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800122a:	d101      	bne.n	8001230 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800122c:	6903      	ldr	r3, [r0, #16]
 800122e:	e007      	b.n	8001240 <vListInsert+0x1e>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001230:	f100 0308 	add.w	r3, r0, #8
 8001234:	e000      	b.n	8001238 <vListInsert+0x16>
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	685c      	ldr	r4, [r3, #4]
 800123a:	6824      	ldr	r4, [r4, #0]
 800123c:	4294      	cmp	r4, r2
 800123e:	d9fa      	bls.n	8001236 <vListInsert+0x14>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001240:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001242:	6108      	str	r0, [r1, #16]
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001244:	6091      	str	r1, [r2, #8]
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001246:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001248:	6059      	str	r1, [r3, #4]
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
 800124a:	608b      	str	r3, [r1, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800124c:	6803      	ldr	r3, [r0, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	6003      	str	r3, [r0, #0]
}
 8001252:	bd10      	pop	{r4, pc}

08001254 <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001254:	6843      	ldr	r3, [r0, #4]
 8001256:	6882      	ldr	r2, [r0, #8]
 8001258:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800125a:	6882      	ldr	r2, [r0, #8]
 800125c:	6053      	str	r3, [r2, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 800125e:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001260:	6859      	ldr	r1, [r3, #4]
 8001262:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001264:	bf08      	it	eq
 8001266:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8001268:	2200      	movs	r2, #0
 800126a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	3a01      	subs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]
}
 8001272:	4770      	bx	lr

08001274 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8001274:	b510      	push	{r4, lr}
 8001276:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001278:	f7ff ff70 	bl	800115c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800127c:	e00b      	b.n	8001296 <prvUnlockQueue+0x22>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800127e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001280:	b163      	cbz	r3, 800129c <prvUnlockQueue+0x28>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001282:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001286:	f000 fda3 	bl	8001dd0 <xTaskRemoveFromEventList>
 800128a:	b108      	cbz	r0, 8001290 <prvUnlockQueue+0x1c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 800128c:	f000 fe22 	bl	8001ed4 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8001290:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001292:	3b01      	subs	r3, #1
 8001294:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001296:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001298:	2b00      	cmp	r3, #0
 800129a:	dcf0      	bgt.n	800127e <prvUnlockQueue+0xa>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80012a2:	f7ff ff67 	bl	8001174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80012a6:	f7ff ff59 	bl	800115c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80012aa:	e00b      	b.n	80012c4 <prvUnlockQueue+0x50>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012ac:	6923      	ldr	r3, [r4, #16]
 80012ae:	b163      	cbz	r3, 80012ca <prvUnlockQueue+0x56>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012b0:	f104 0010 	add.w	r0, r4, #16
 80012b4:	f000 fd8c 	bl	8001dd0 <xTaskRemoveFromEventList>
 80012b8:	b108      	cbz	r0, 80012be <prvUnlockQueue+0x4a>
				{
					vTaskMissedYield();
 80012ba:	f000 fe0b 	bl	8001ed4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 80012be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012c0:	3b01      	subs	r3, #1
 80012c2:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80012c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	dcf0      	bgt.n	80012ac <prvUnlockQueue+0x38>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80012d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 80012d4:	f7ff bf4e 	b.w	8001174 <vPortExitCritical>

080012d8 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 80012d8:	b530      	push	{r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 80012da:	6804      	ldr	r4, [r0, #0]
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 80012dc:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 80012de:	b16c      	cbz	r4, 80012fc <prvCopyDataFromQueue+0x24>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 80012e0:	68c5      	ldr	r5, [r0, #12]
 80012e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80012e4:	18ad      	adds	r5, r5, r2
 80012e6:	60c5      	str	r5, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 80012e8:	6840      	ldr	r0, [r0, #4]
 80012ea:	4285      	cmp	r5, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 80012ec:	bf28      	it	cs
 80012ee:	60dc      	strcs	r4, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 80012f0:	4608      	mov	r0, r1
 80012f2:	68d9      	ldr	r1, [r3, #12]
	}
}
 80012f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 80012f8:	f7fe bfb8 	b.w	800026c <memcpy>
 80012fc:	bd30      	pop	{r4, r5, pc}

080012fe <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 80012fe:	4613      	mov	r3, r2
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8001300:	6c02      	ldr	r2, [r0, #64]	; 0x40
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8001302:	b510      	push	{r4, lr}
 8001304:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8001306:	b1da      	cbz	r2, 8001340 <prvCopyDataToQueue+0x42>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001308:	b963      	cbnz	r3, 8001324 <prvCopyDataToQueue+0x26>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 800130a:	6880      	ldr	r0, [r0, #8]
 800130c:	f7fe ffae 	bl	800026c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001310:	68a2      	ldr	r2, [r4, #8]
 8001312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001314:	18d3      	adds	r3, r2, r3
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8001316:	6862      	ldr	r2, [r4, #4]
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001318:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 800131a:	4293      	cmp	r3, r2
 800131c:	d310      	bcc.n	8001340 <prvCopyDataToQueue+0x42>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	60a3      	str	r3, [r4, #8]
 8001322:	e00d      	b.n	8001340 <prvCopyDataToQueue+0x42>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8001324:	68c0      	ldr	r0, [r0, #12]
 8001326:	f7fe ffa1 	bl	800026c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 800132a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800132c:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 800132e:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8001330:	425b      	negs	r3, r3
 8001332:	18d2      	adds	r2, r2, r3
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8001334:	428a      	cmp	r2, r1
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8001336:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8001338:	d202      	bcs.n	8001340 <prvCopyDataToQueue+0x42>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800133a:	6862      	ldr	r2, [r4, #4]
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001342:	3301      	adds	r3, #1
 8001344:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001346:	bd10      	pop	{r4, pc}

08001348 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
 8001348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134a:	460e      	mov	r6, r1
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 800134c:	4605      	mov	r5, r0
 800134e:	b338      	cbz	r0, 80013a0 <xQueueCreate+0x58>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8001350:	204c      	movs	r0, #76	; 0x4c
 8001352:	f7ff fe33 	bl	8000fbc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001356:	4604      	mov	r4, r0
 8001358:	b310      	cbz	r0, 80013a0 <xQueueCreate+0x58>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 800135a:	fb05 f706 	mul.w	r7, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 800135e:	1c78      	adds	r0, r7, #1
 8001360:	f7ff fe2c 	bl	8000fbc <pvPortMalloc>
 8001364:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
 8001366:	b1c0      	cbz	r0, 800139a <xQueueCreate+0x52>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	63a3      	str	r3, [r4, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 800136c:	1e6b      	subs	r3, r5, #1
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 800136e:	19c7      	adds	r7, r0, r7
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 8001370:	60a0      	str	r0, [r4, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 8001372:	fb06 0003 	mla	r0, r6, r3, r0
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 800137a:	60e0      	str	r0, [r4, #12]
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
 800137c:	6463      	str	r3, [r4, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
 800137e:	64a3      	str	r3, [r4, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8001380:	f104 0010 	add.w	r0, r4, #16
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 8001384:	6067      	str	r7, [r4, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
				pxNewQueue->uxLength = uxQueueLength;
 8001386:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8001388:	6426      	str	r6, [r4, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
				pxNewQueue->xTxLock = queueUNLOCKED;

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800138a:	f7ff ff2f 	bl	80011ec <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 800138e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001392:	f7ff ff2b 	bl	80011ec <vListInitialise>
	}

	configASSERT( xReturn );

	return xReturn;
}
 8001396:	4620      	mov	r0, r4
 8001398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fe66 	bl	800106c <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 80013a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80013a4:	f380 8811 	msr	BASEPRI, r0
 80013a8:	e7fe      	b.n	80013a8 <xQueueCreate+0x60>

080013aa <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80013aa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80013ae:	460c      	mov	r4, r1
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	461e      	mov	r6, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
 80013b4:	4605      	mov	r5, r0
 80013b6:	b920      	cbnz	r0, 80013c2 <xQueueGenericSend+0x18>
 80013b8:	f04f 0050 	mov.w	r0, #80	; 0x50
 80013bc:	f380 8811 	msr	BASEPRI, r0
 80013c0:	e7fe      	b.n	80013c0 <xQueueGenericSend+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80013c2:	b119      	cbz	r1, 80013cc <xQueueGenericSend+0x22>
 80013c4:	2700      	movs	r7, #0
 80013c6:	e007      	b.n	80013d8 <xQueueGenericSend+0x2e>
 80013c8:	4627      	mov	r7, r4
 80013ca:	e005      	b.n	80013d8 <xQueueGenericSend+0x2e>
 80013cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0fa      	beq.n	80013c8 <xQueueGenericSend+0x1e>
 80013d2:	e067      	b.n	80014a4 <xQueueGenericSend+0xfa>
 80013d4:	e7fe      	b.n	80013d4 <xQueueGenericSend+0x2a>
 80013d6:	2701      	movs	r7, #1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80013d8:	f7ff fec0 	bl	800115c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80013dc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80013de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d212      	bcs.n	800140a <xQueueGenericSend+0x60>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80013e4:	4628      	mov	r0, r5
 80013e6:	4621      	mov	r1, r4
 80013e8:	4632      	mov	r2, r6
 80013ea:	f7ff ff88 	bl	80012fe <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013f0:	b13b      	cbz	r3, 8001402 <xQueueGenericSend+0x58>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80013f2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80013f6:	f000 fceb 	bl	8001dd0 <xTaskRemoveFromEventList>
 80013fa:	2801      	cmp	r0, #1
 80013fc:	d101      	bne.n	8001402 <xQueueGenericSend+0x58>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 80013fe:	f7ff fea5 	bl	800114c <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 8001402:	f7ff feb7 	bl	8001174 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8001406:	2001      	movs	r0, #1
 8001408:	e049      	b.n	800149e <xQueueGenericSend+0xf4>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800140a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800140e:	f1b8 0f00 	cmp.w	r8, #0
 8001412:	d103      	bne.n	800141c <xQueueGenericSend+0x72>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001414:	f7ff feae 	bl	8001174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001418:	4640      	mov	r0, r8
 800141a:	e040      	b.n	800149e <xQueueGenericSend+0xf4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800141c:	b917      	cbnz	r7, 8001424 <xQueueGenericSend+0x7a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800141e:	a802      	add	r0, sp, #8
 8001420:	f000 fd0e 	bl	8001e40 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
 8001424:	f7ff fea6 	bl	8001174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001428:	f000 fac6 	bl	80019b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800142c:	f7ff fe96 	bl	800115c <vPortEnterCritical>
 8001430:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001436:	d101      	bne.n	800143c <xQueueGenericSend+0x92>
 8001438:	3301      	adds	r3, #1
 800143a:	646b      	str	r3, [r5, #68]	; 0x44
 800143c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800143e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001442:	d101      	bne.n	8001448 <xQueueGenericSend+0x9e>
 8001444:	3301      	adds	r3, #1
 8001446:	64ab      	str	r3, [r5, #72]	; 0x48
 8001448:	f7ff fe94 	bl	8001174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800144c:	a802      	add	r0, sp, #8
 800144e:	a901      	add	r1, sp, #4
 8001450:	f000 fd08 	bl	8001e64 <xTaskCheckForTimeOut>
 8001454:	b9e8      	cbnz	r0, 8001492 <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001456:	f7ff fe81 	bl	800115c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 800145a:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 800145e:	6bef      	ldr	r7, [r5, #60]	; 0x3c
	taskEXIT_CRITICAL();
 8001460:	f7ff fe88 	bl	8001174 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
 8001464:	45b8      	cmp	r8, r7
 8001466:	d10e      	bne.n	8001486 <xQueueGenericSend+0xdc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001468:	f105 0010 	add.w	r0, r5, #16
 800146c:	9901      	ldr	r1, [sp, #4]
 800146e:	f000 fc6b 	bl	8001d48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001472:	4628      	mov	r0, r5
 8001474:	f7ff fefe 	bl	8001274 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
 8001478:	f000 fb20 	bl	8001abc <xTaskResumeAll>
 800147c:	2800      	cmp	r0, #0
 800147e:	d1aa      	bne.n	80013d6 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
 8001480:	f7ff fe64 	bl	800114c <vPortYieldFromISR>
 8001484:	e7a7      	b.n	80013d6 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001486:	4628      	mov	r0, r5
 8001488:	f7ff fef4 	bl	8001274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800148c:	f000 fb16 	bl	8001abc <xTaskResumeAll>
 8001490:	e7a1      	b.n	80013d6 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001492:	4628      	mov	r0, r5
 8001494:	f7ff feee 	bl	8001274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001498:	f000 fb10 	bl	8001abc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800149c:	2000      	movs	r0, #0
		}
	}
}
 800149e:	b004      	add	sp, #16
 80014a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80014a4:	f04f 0050 	mov.w	r0, #80	; 0x50
 80014a8:	f380 8811 	msr	BASEPRI, r0
 80014ac:	e792      	b.n	80013d4 <xQueueGenericSend+0x2a>

080014ae <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 80014ae:	b538      	push	{r3, r4, r5, lr}
 80014b0:	4614      	mov	r4, r2
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
 80014b2:	4605      	mov	r5, r0
 80014b4:	b920      	cbnz	r0, 80014c0 <xQueueGenericSendFromISR+0x12>
 80014b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80014ba:	f380 8811 	msr	BASEPRI, r0
 80014be:	e7fe      	b.n	80014be <xQueueGenericSendFromISR+0x10>
	configASSERT( pxHigherPriorityTaskWoken );
 80014c0:	b922      	cbnz	r2, 80014cc <xQueueGenericSendFromISR+0x1e>
 80014c2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80014c6:	f380 8811 	msr	BASEPRI, r0
 80014ca:	e7fe      	b.n	80014ca <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80014cc:	b909      	cbnz	r1, 80014d2 <xQueueGenericSendFromISR+0x24>
 80014ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80014d0:	bb2a      	cbnz	r2, 800151e <xQueueGenericSendFromISR+0x70>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80014d2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80014d6:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80014da:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80014dc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80014de:	4290      	cmp	r0, r2
 80014e0:	d302      	bcc.n	80014e8 <xQueueGenericSendFromISR+0x3a>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e015      	b.n	8001512 <xQueueGenericSendFromISR+0x64>
 80014e6:	e7fe      	b.n	80014e6 <xQueueGenericSendFromISR+0x38>
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80014e8:	461a      	mov	r2, r3
 80014ea:	4628      	mov	r0, r5
 80014ec:	f7ff ff07 	bl	80012fe <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80014f0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80014f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f6:	d109      	bne.n	800150c <xQueueGenericSendFromISR+0x5e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80014fa:	b14b      	cbz	r3, 8001510 <xQueueGenericSendFromISR+0x62>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014fc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001500:	f000 fc66 	bl	8001dd0 <xTaskRemoveFromEventList>
 8001504:	2301      	movs	r3, #1
 8001506:	b120      	cbz	r0, 8001512 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
 8001508:	6023      	str	r3, [r4, #0]
 800150a:	e002      	b.n	8001512 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 800150c:	3301      	adds	r3, #1
 800150e:	64ab      	str	r3, [r5, #72]	; 0x48
			}

			xReturn = pdPASS;
 8001510:	2301      	movs	r3, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001512:	f04f 0000 	mov.w	r0, #0
 8001516:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd38      	pop	{r3, r4, r5, pc}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( pxHigherPriorityTaskWoken );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800151e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001522:	f380 8811 	msr	BASEPRI, r0
 8001526:	e7de      	b.n	80014e6 <xQueueGenericSendFromISR+0x38>

08001528 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8001528:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800152c:	460c      	mov	r4, r1
 800152e:	9201      	str	r2, [sp, #4]
 8001530:	461f      	mov	r7, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
 8001532:	4605      	mov	r5, r0
 8001534:	b920      	cbnz	r0, 8001540 <xQueueGenericReceive+0x18>
 8001536:	f04f 0050 	mov.w	r0, #80	; 0x50
 800153a:	f380 8811 	msr	BASEPRI, r0
 800153e:	e7fe      	b.n	800153e <xQueueGenericReceive+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001540:	b119      	cbz	r1, 800154a <xQueueGenericReceive+0x22>
 8001542:	2600      	movs	r6, #0
 8001544:	e007      	b.n	8001556 <xQueueGenericReceive+0x2e>
 8001546:	4626      	mov	r6, r4
 8001548:	e005      	b.n	8001556 <xQueueGenericReceive+0x2e>
 800154a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0fa      	beq.n	8001546 <xQueueGenericReceive+0x1e>
 8001550:	e06f      	b.n	8001632 <xQueueGenericReceive+0x10a>
 8001552:	e7fe      	b.n	8001552 <xQueueGenericReceive+0x2a>
 8001554:	2601      	movs	r6, #1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001556:	f7ff fe01 	bl	800115c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 800155a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800155c:	b1fb      	cbz	r3, 800159e <xQueueGenericReceive+0x76>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800155e:	4628      	mov	r0, r5
 8001560:	4621      	mov	r1, r4
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8001562:	68ee      	ldr	r6, [r5, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001564:	f7ff feb8 	bl	80012d8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001568:	b95f      	cbnz	r7, 8001582 <xQueueGenericReceive+0x5a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 800156a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800156c:	3b01      	subs	r3, #1
 800156e:	63ab      	str	r3, [r5, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001570:	692b      	ldr	r3, [r5, #16]
 8001572:	b183      	cbz	r3, 8001596 <xQueueGenericReceive+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001574:	f105 0010 	add.w	r0, r5, #16
 8001578:	f000 fc2a 	bl	8001dd0 <xTaskRemoveFromEventList>
 800157c:	2801      	cmp	r0, #1
 800157e:	d10a      	bne.n	8001596 <xQueueGenericReceive+0x6e>
 8001580:	e007      	b.n	8001592 <xQueueGenericReceive+0x6a>
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001582:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8001584:	60ee      	str	r6, [r5, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001586:	b133      	cbz	r3, 8001596 <xQueueGenericReceive+0x6e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001588:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800158c:	f000 fc20 	bl	8001dd0 <xTaskRemoveFromEventList>
 8001590:	b108      	cbz	r0, 8001596 <xQueueGenericReceive+0x6e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8001592:	f7ff fddb 	bl	800114c <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 8001596:	f7ff fded 	bl	8001174 <vPortExitCritical>
				return pdPASS;
 800159a:	2001      	movs	r0, #1
 800159c:	e046      	b.n	800162c <xQueueGenericReceive+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800159e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80015a2:	f1b8 0f00 	cmp.w	r8, #0
 80015a6:	d103      	bne.n	80015b0 <xQueueGenericReceive+0x88>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80015a8:	f7ff fde4 	bl	8001174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80015ac:	4640      	mov	r0, r8
 80015ae:	e03d      	b.n	800162c <xQueueGenericReceive+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
 80015b0:	b916      	cbnz	r6, 80015b8 <xQueueGenericReceive+0x90>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80015b2:	a802      	add	r0, sp, #8
 80015b4:	f000 fc44 	bl	8001e40 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
 80015b8:	f7ff fddc 	bl	8001174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80015bc:	f000 f9fc 	bl	80019b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80015c0:	f7ff fdcc 	bl	800115c <vPortEnterCritical>
 80015c4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80015c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ca:	d101      	bne.n	80015d0 <xQueueGenericReceive+0xa8>
 80015cc:	3301      	adds	r3, #1
 80015ce:	646b      	str	r3, [r5, #68]	; 0x44
 80015d0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80015d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d6:	d101      	bne.n	80015dc <xQueueGenericReceive+0xb4>
 80015d8:	3301      	adds	r3, #1
 80015da:	64ab      	str	r3, [r5, #72]	; 0x48
 80015dc:	f7ff fdca 	bl	8001174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80015e0:	a802      	add	r0, sp, #8
 80015e2:	a901      	add	r1, sp, #4
 80015e4:	f000 fc3e 	bl	8001e64 <xTaskCheckForTimeOut>
 80015e8:	b9d0      	cbnz	r0, 8001620 <xQueueGenericReceive+0xf8>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80015ea:	f7ff fdb7 	bl	800115c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 80015ee:	6bae      	ldr	r6, [r5, #56]	; 0x38
	taskEXIT_CRITICAL();
 80015f0:	f7ff fdc0 	bl	8001174 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
 80015f4:	b976      	cbnz	r6, 8001614 <xQueueGenericReceive+0xec>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80015f6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80015fa:	9901      	ldr	r1, [sp, #4]
 80015fc:	f000 fba4 	bl	8001d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001600:	4628      	mov	r0, r5
 8001602:	f7ff fe37 	bl	8001274 <prvUnlockQueue>
				if( !xTaskResumeAll() )
 8001606:	f000 fa59 	bl	8001abc <xTaskResumeAll>
 800160a:	2800      	cmp	r0, #0
 800160c:	d1a2      	bne.n	8001554 <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
 800160e:	f7ff fd9d 	bl	800114c <vPortYieldFromISR>
 8001612:	e79f      	b.n	8001554 <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001614:	4628      	mov	r0, r5
 8001616:	f7ff fe2d 	bl	8001274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800161a:	f000 fa4f 	bl	8001abc <xTaskResumeAll>
 800161e:	e799      	b.n	8001554 <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001620:	4628      	mov	r0, r5
 8001622:	f7ff fe27 	bl	8001274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001626:	f000 fa49 	bl	8001abc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800162a:	2000      	movs	r0, #0
		}
	}
}
 800162c:	b004      	add	sp, #16
 800162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001632:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001636:	f380 8811 	msr	BASEPRI, r0
 800163a:	e78a      	b.n	8001552 <xQueueGenericReceive+0x2a>

0800163c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	4604      	mov	r4, r0
 8001640:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001642:	f7ff fd8b 	bl	800115c <vPortEnterCritical>
 8001646:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d101      	bne.n	8001652 <vQueueWaitForMessageRestricted+0x16>
 800164e:	3301      	adds	r3, #1
 8001650:	6463      	str	r3, [r4, #68]	; 0x44
 8001652:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d101      	bne.n	800165e <vQueueWaitForMessageRestricted+0x22>
 800165a:	3301      	adds	r3, #1
 800165c:	64a3      	str	r3, [r4, #72]	; 0x48
 800165e:	f7ff fd89 	bl	8001174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8001662:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001664:	b923      	cbnz	r3, 8001670 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001666:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800166a:	4629      	mov	r1, r5
 800166c:	f000 fb94 	bl	8001d98 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8001670:	4620      	mov	r0, r4
	}
 8001672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
 8001676:	f7ff bdfd 	b.w	8001274 <prvUnlockQueue>
	...

0800167c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <prvAddCurrentTaskToDelayedList+0x3c>)
 800167e:	681a      	ldr	r2, [r3, #0]
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8001680:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001682:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <prvAddCurrentTaskToDelayedList+0x40>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	4290      	cmp	r0, r2
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 800168a:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 800168c:	d207      	bcs.n	800169e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800168e:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <prvAddCurrentTaskToDelayedList+0x44>)
 8001690:	6810      	ldr	r0, [r2, #0]
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	3104      	adds	r1, #4
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 8001696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800169a:	f7ff bdc2 	b.w	8001222 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800169e:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <prvAddCurrentTaskToDelayedList+0x48>)
 80016a0:	6810      	ldr	r0, [r2, #0]
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	3104      	adds	r1, #4
 80016a6:	f7ff fdbc 	bl	8001222 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <prvAddCurrentTaskToDelayedList+0x4c>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 80016b0:	bf38      	it	cc
 80016b2:	601c      	strcc	r4, [r3, #0]
 80016b4:	bd10      	pop	{r4, pc}
 80016b6:	bf00      	nop
 80016b8:	2000c904 	.word	0x2000c904
 80016bc:	2000c91c 	.word	0x2000c91c
 80016c0:	2000c920 	.word	0x2000c920
 80016c4:	2000c864 	.word	0x2000c864
 80016c8:	20000020 	.word	0x20000020

080016cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 80016cc:	b510      	push	{r4, lr}
 80016ce:	4604      	mov	r4, r0
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80016d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80016d2:	f7ff fccb 	bl	800106c <vPortFree>
		vPortFree( pxTCB );
 80016d6:	4620      	mov	r0, r4
	}
 80016d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
		vPortFree( pxTCB );
 80016dc:	f7ff bcc6 	b.w	800106c <vPortFree>

080016e0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80016e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80016e6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80016ea:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80016ee:	460d      	mov	r5, r1
 80016f0:	4614      	mov	r4, r2
 80016f2:	4699      	mov	r9, r3
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 80016f4:	4680      	mov	r8, r0
 80016f6:	b920      	cbnz	r0, 8001702 <xTaskGenericCreate+0x22>
 80016f8:	f04f 0050 	mov.w	r0, #80	; 0x50
 80016fc:	f380 8811 	msr	BASEPRI, r0
 8001700:	e7fe      	b.n	8001700 <xTaskGenericCreate+0x20>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 8001702:	2f04      	cmp	r7, #4
 8001704:	d904      	bls.n	8001710 <xTaskGenericCreate+0x30>
 8001706:	f04f 0050 	mov.w	r0, #80	; 0x50
 800170a:	f380 8811 	msr	BASEPRI, r0
 800170e:	e7fe      	b.n	800170e <xTaskGenericCreate+0x2e>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001710:	2040      	movs	r0, #64	; 0x40
 8001712:	f7ff fc53 	bl	8000fbc <pvPortMalloc>

	if( pxNewTCB != NULL )
 8001716:	4606      	mov	r6, r0
 8001718:	2800      	cmp	r0, #0
 800171a:	f000 80a2 	beq.w	8001862 <xTaskGenericCreate+0x182>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 800171e:	f1bb 0f00 	cmp.w	fp, #0
 8001722:	d103      	bne.n	800172c <xTaskGenericCreate+0x4c>
 8001724:	00a0      	lsls	r0, r4, #2
 8001726:	f7ff fc49 	bl	8000fbc <pvPortMalloc>
 800172a:	4683      	mov	fp, r0
 800172c:	f8c6 b030 	str.w	fp, [r6, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001730:	f1bb 0f00 	cmp.w	fp, #0
 8001734:	d103      	bne.n	800173e <xTaskGenericCreate+0x5e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001736:	4630      	mov	r0, r6
 8001738:	f7ff fc98 	bl	800106c <vPortFree>
 800173c:	e091      	b.n	8001862 <xTaskGenericCreate+0x182>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
 800173e:	00a2      	lsls	r2, r4, #2
 8001740:	21a5      	movs	r1, #165	; 0xa5
 8001742:	4658      	mov	r0, fp
 8001744:	f7fe fe3a 	bl	80003bc <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8001748:	6b33      	ldr	r3, [r6, #48]	; 0x30
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 800174a:	4629      	mov	r1, r5
 800174c:	220a      	movs	r2, #10
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 800174e:	3c01      	subs	r4, #1
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8001750:	f106 0034 	add.w	r0, r6, #52	; 0x34
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8001754:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001758:	1d35      	adds	r5, r6, #4
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 800175a:	f7fe fe89 	bl	8000470 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 800175e:	2300      	movs	r3, #0
 8001760:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001764:	4628      	mov	r0, r5
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
 8001766:	62f7      	str	r7, [r6, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001768:	f7ff fd4b 	bl	8001202 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800176c:	f106 0018 	add.w	r0, r6, #24
 8001770:	f7ff fd47 	bl	8001202 <vListInitialiseItem>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
 8001774:	f024 0407 	bic.w	r4, r4, #7
	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8001778:	f1c7 0305 	rsb	r3, r7, #5
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800177c:	6136      	str	r6, [r6, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 800177e:	61b3      	str	r3, [r6, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8001780:	6276      	str	r6, [r6, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001782:	4620      	mov	r0, r4
 8001784:	4641      	mov	r1, r8
 8001786:	464a      	mov	r2, r9
 8001788:	f7ff fc96 	bl	80010b8 <pxPortInitialiseStack>
		}
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800178c:	f010 0f07 	tst.w	r0, #7
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001790:	6030      	str	r0, [r6, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001792:	d004      	beq.n	800179e <xTaskGenericCreate+0xbe>
 8001794:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001798:	f380 8811 	msr	BASEPRI, r0
 800179c:	e7fe      	b.n	800179c <xTaskGenericCreate+0xbc>

		if( ( void * ) pxCreatedTask != NULL )
 800179e:	f1ba 0f00 	cmp.w	sl, #0
 80017a2:	d001      	beq.n	80017a8 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 80017a4:	f8ca 6000 	str.w	r6, [sl]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 80017a8:	f7ff fcd8 	bl	800115c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <xTaskGenericCreate+0x198>)
			if( pxCurrentTCB == NULL )
 80017ae:	4c33      	ldr	r4, [pc, #204]	; (800187c <xTaskGenericCreate+0x19c>)
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80018a4 <xTaskGenericCreate+0x1c4>
 80017b6:	3201      	adds	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80017ba:	6822      	ldr	r2, [r4, #0]
 80017bc:	bb42      	cbnz	r2, 8001810 <xTaskGenericCreate+0x130>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80017be:	6026      	str	r6, [r4, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d12c      	bne.n	8001820 <xTaskGenericCreate+0x140>
 80017c6:	4690      	mov	r8, r2
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 80017c8:	2014      	movs	r0, #20
 80017ca:	fb00 9008 	mla	r0, r0, r8, r9

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80017ce:	f108 0801 	add.w	r8, r8, #1
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 80017d2:	f7ff fd0b 	bl	80011ec <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80017d6:	f1b8 0f05 	cmp.w	r8, #5
 80017da:	d1f5      	bne.n	80017c8 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 80017dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80018a8 <xTaskGenericCreate+0x1c8>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 80017e0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80018ac <xTaskGenericCreate+0x1cc>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 80017e4:	4650      	mov	r0, sl
 80017e6:	f7ff fd01 	bl	80011ec <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 80017ea:	4640      	mov	r0, r8
 80017ec:	f7ff fcfe 	bl	80011ec <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 80017f0:	4823      	ldr	r0, [pc, #140]	; (8001880 <xTaskGenericCreate+0x1a0>)
 80017f2:	f7ff fcfb 	bl	80011ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 80017f6:	4823      	ldr	r0, [pc, #140]	; (8001884 <xTaskGenericCreate+0x1a4>)
 80017f8:	f7ff fcf8 	bl	80011ec <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 80017fc:	4822      	ldr	r0, [pc, #136]	; (8001888 <xTaskGenericCreate+0x1a8>)
 80017fe:	f7ff fcf5 	bl	80011ec <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <xTaskGenericCreate+0x1ac>)
 8001804:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <xTaskGenericCreate+0x1b0>)
 800180a:	f8c3 8000 	str.w	r8, [r3]
 800180e:	e007      	b.n	8001820 <xTaskGenericCreate+0x140>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <xTaskGenericCreate+0x1b4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	b923      	cbnz	r3, 8001820 <xTaskGenericCreate+0x140>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	42bb      	cmp	r3, r7
					{
						pxCurrentTCB = pxNewTCB;
 800181c:	bf98      	it	ls
 800181e:	6026      	strls	r6, [r4, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8001820:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <xTaskGenericCreate+0x1b8>)
 8001822:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001824:	6811      	ldr	r1, [r2, #0]
 8001826:	428b      	cmp	r3, r1
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8001828:	bf88      	it	hi
 800182a:	6013      	strhi	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 800182c:	4a1b      	ldr	r2, [pc, #108]	; (800189c <xTaskGenericCreate+0x1bc>)
 800182e:	6811      	ldr	r1, [r2, #0]
 8001830:	3101      	adds	r1, #1
 8001832:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8001834:	4a1a      	ldr	r2, [pc, #104]	; (80018a0 <xTaskGenericCreate+0x1c0>)
 8001836:	6811      	ldr	r1, [r2, #0]
 8001838:	428b      	cmp	r3, r1
 800183a:	bf88      	it	hi
 800183c:	6013      	strhi	r3, [r2, #0]
 800183e:	2014      	movs	r0, #20
 8001840:	fb00 9003 	mla	r0, r0, r3, r9
 8001844:	4629      	mov	r1, r5
 8001846:	f7ff fcdf 	bl	8001208 <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800184a:	f7ff fc93 	bl	8001174 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <xTaskGenericCreate+0x1b4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b153      	cbz	r3, 800186a <xTaskGenericCreate+0x18a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	42bb      	cmp	r3, r7
 800185a:	d209      	bcs.n	8001870 <xTaskGenericCreate+0x190>
			{
				portYIELD_WITHIN_API();
 800185c:	f7ff fc76 	bl	800114c <vPortYieldFromISR>
 8001860:	e003      	b.n	800186a <xTaskGenericCreate+0x18a>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001862:	f04f 30ff 	mov.w	r0, #4294967295
 8001866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
 800186a:	2001      	movs	r0, #1
 800186c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001870:	2001      	movs	r0, #1
			}
		}
	}

	return xReturn;
}
 8001872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001876:	bf00      	nop
 8001878:	2000c944 	.word	0x2000c944
 800187c:	2000c904 	.word	0x2000c904
 8001880:	2000c908 	.word	0x2000c908
 8001884:	2000c870 	.word	0x2000c870
 8001888:	2000c850 	.word	0x2000c850
 800188c:	2000c864 	.word	0x2000c864
 8001890:	2000c920 	.word	0x2000c920
 8001894:	2000c868 	.word	0x2000c868
 8001898:	2000c948 	.word	0x2000c948
 800189c:	2000c928 	.word	0x2000c928
 80018a0:	2000c924 	.word	0x2000c924
 80018a4:	2000c898 	.word	0x2000c898
 80018a8:	2000c92c 	.word	0x2000c92c
 80018ac:	2000c884 	.word	0x2000c884

080018b0 <xTaskIsTaskSuspended>:
	{
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80018b0:	b920      	cbnz	r0, 80018bc <xTaskIsTaskSuspended+0xc>
 80018b2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80018b6:	f380 8811 	msr	BASEPRI, r0
 80018ba:	e7fe      	b.n	80018ba <xTaskIsTaskSuspended+0xa>

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80018bc:	6942      	ldr	r2, [r0, #20]
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <xTaskIsTaskSuspended+0x30>)
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d108      	bne.n	80018d6 <xTaskIsTaskSuspended+0x26>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 80018c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <xTaskIsTaskSuspended+0x34>)
 80018c8:	4298      	cmp	r0, r3
 80018ca:	d006      	beq.n	80018da <xTaskIsTaskSuspended+0x2a>

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
	portBASE_TYPE xReturn = pdFALSE;
 80018cc:	f1d0 0001 	rsbs	r0, r0, #1
 80018d0:	bf38      	it	cc
 80018d2:	2000      	movcc	r0, #0
 80018d4:	4770      	bx	lr
 80018d6:	2000      	movs	r0, #0
 80018d8:	4770      	bx	lr
 80018da:	2000      	movs	r0, #0
				}
			}
		}

		return xReturn;
	}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	2000c850 	.word	0x2000c850
 80018e4:	2000c908 	.word	0x2000c908

080018e8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
 80018e8:	b570      	push	{r4, r5, r6, lr}
	tskTCB *pxTCB;

		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );
 80018ea:	4604      	mov	r4, r0
 80018ec:	b920      	cbnz	r0, 80018f8 <vTaskResume+0x10>
 80018ee:	f04f 0050 	mov.w	r0, #80	; 0x50
 80018f2:	f380 8811 	msr	BASEPRI, r0
 80018f6:	e7fe      	b.n	80018f6 <vTaskResume+0xe>
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80018f8:	4d13      	ldr	r5, [pc, #76]	; (8001948 <vTaskResume+0x60>)
 80018fa:	682b      	ldr	r3, [r5, #0]
 80018fc:	4298      	cmp	r0, r3
 80018fe:	d022      	beq.n	8001946 <vTaskResume+0x5e>
		{
			taskENTER_CRITICAL();
 8001900:	f7ff fc2c 	bl	800115c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8001904:	4620      	mov	r0, r4
 8001906:	f7ff ffd3 	bl	80018b0 <xTaskIsTaskSuspended>
 800190a:	2801      	cmp	r0, #1
 800190c:	d117      	bne.n	800193e <vTaskResume+0x56>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
 800190e:	1d26      	adds	r6, r4, #4
 8001910:	4630      	mov	r0, r6
 8001912:	f7ff fc9f 	bl	8001254 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8001916:	4a0d      	ldr	r2, [pc, #52]	; (800194c <vTaskResume+0x64>)
 8001918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800191a:	6811      	ldr	r1, [r2, #0]
 800191c:	428b      	cmp	r3, r1
 800191e:	bf88      	it	hi
 8001920:	6013      	strhi	r3, [r2, #0]
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <vTaskResume+0x68>)
 8001924:	2014      	movs	r0, #20
 8001926:	fb00 2003 	mla	r0, r0, r3, r2
 800192a:	4631      	mov	r1, r6
 800192c:	f7ff fc6c 	bl	8001208 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001930:	682b      	ldr	r3, [r5, #0]
 8001932:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	429a      	cmp	r2, r3
 8001938:	d301      	bcc.n	800193e <vTaskResume+0x56>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
 800193a:	f7ff fc07 	bl	800114c <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
		}
	}
 800193e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
					}
				}
			}
			taskEXIT_CRITICAL();
 8001942:	f7ff bc17 	b.w	8001174 <vPortExitCritical>
 8001946:	bd70      	pop	{r4, r5, r6, pc}
 8001948:	2000c904 	.word	0x2000c904
 800194c:	2000c924 	.word	0x2000c924
 8001950:	2000c898 	.word	0x2000c898

08001954 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8001954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
 8001956:	2400      	movs	r4, #0
 8001958:	22c8      	movs	r2, #200	; 0xc8
 800195a:	4623      	mov	r3, r4
 800195c:	4812      	ldr	r0, [pc, #72]	; (80019a8 <vTaskStartScheduler+0x54>)
 800195e:	4913      	ldr	r1, [pc, #76]	; (80019ac <vTaskStartScheduler+0x58>)
 8001960:	9400      	str	r4, [sp, #0]
 8001962:	9401      	str	r4, [sp, #4]
 8001964:	9402      	str	r4, [sp, #8]
 8001966:	9403      	str	r4, [sp, #12]
 8001968:	f7ff feba 	bl	80016e0 <xTaskGenericCreate>

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800196c:	2801      	cmp	r0, #1
void vTaskStartScheduler( void )
{
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
 800196e:	4603      	mov	r3, r0

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001970:	d111      	bne.n	8001996 <vTaskStartScheduler+0x42>
		{
			xReturn = xTimerCreateTimerTask();
 8001972:	f000 fb09 	bl	8001f88 <xTimerCreateTimerTask>
		}
	}
	#endif

	if( xReturn == pdPASS )
 8001976:	2801      	cmp	r0, #1

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 8001978:	4603      	mov	r3, r0
		}
	}
	#endif

	if( xReturn == pdPASS )
 800197a:	d10c      	bne.n	8001996 <vTaskStartScheduler+0x42>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 800197c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001980:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <vTaskStartScheduler+0x5c>)
 8001986:	6013      	str	r3, [r2, #0]
		xTickCount = ( portTickType ) 0;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <vTaskStartScheduler+0x60>)
 800198a:	601c      	str	r4, [r3, #0]
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 800198c:	b004      	add	sp, #16
 800198e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
 8001992:	f7ff bbbb 	b.w	800110c <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
 8001996:	b923      	cbnz	r3, 80019a2 <vTaskStartScheduler+0x4e>
 8001998:	f04f 0050 	mov.w	r0, #80	; 0x50
 800199c:	f380 8811 	msr	BASEPRI, r0
 80019a0:	e7fe      	b.n	80019a0 <vTaskStartScheduler+0x4c>
}
 80019a2:	b004      	add	sp, #16
 80019a4:	bd10      	pop	{r4, pc}
 80019a6:	bf00      	nop
 80019a8:	08001b8d 	.word	0x08001b8d
 80019ac:	08002250 	.word	0x08002250
 80019b0:	2000c868 	.word	0x2000c868
 80019b4:	2000c91c 	.word	0x2000c91c

080019b8 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80019b8:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <vTaskSuspendAll+0xc>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	3201      	adds	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	2000c8fc 	.word	0x2000c8fc

080019c8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 80019c8:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 80019ca:	f7ff fbc7 	bl	800115c <vPortEnterCritical>
	{
		xTicks = xTickCount;
 80019ce:	4b03      	ldr	r3, [pc, #12]	; (80019dc <xTaskGetTickCount+0x14>)
 80019d0:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80019d2:	f7ff fbcf 	bl	8001174 <vPortExitCritical>

	return xTicks;
}
 80019d6:	4620      	mov	r0, r4
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	bf00      	nop
 80019dc:	2000c91c 	.word	0x2000c91c

080019e0 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80019e2:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <vTaskIncrementTick+0xb8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d150      	bne.n	8001a8c <vTaskIncrementTick+0xac>
	{
		++xTickCount;
 80019ea:	4d2c      	ldr	r5, [pc, #176]	; (8001a9c <vTaskIncrementTick+0xbc>)
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	602b      	str	r3, [r5, #0]
		if( xTickCount == ( portTickType ) 0 )
 80019f2:	682b      	ldr	r3, [r5, #0]
 80019f4:	b9eb      	cbnz	r3, 8001a32 <vTaskIncrementTick+0x52>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <vTaskIncrementTick+0xc0>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	b122      	cbz	r2, 8001a08 <vTaskIncrementTick+0x28>
 80019fe:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a02:	f380 8811 	msr	BASEPRI, r0
 8001a06:	e7fe      	b.n	8001a06 <vTaskIncrementTick+0x26>
			
			pxTemp = pxDelayedTaskList;
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8001a08:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <vTaskIncrementTick+0xc4>)
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 8001a0a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8001a0c:	6810      	ldr	r0, [r2, #0]
 8001a0e:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8001a10:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
 8001a12:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <vTaskIncrementTick+0xc8>)
 8001a14:	6811      	ldr	r1, [r2, #0]
 8001a16:	3101      	adds	r1, #1
 8001a18:	6011      	str	r1, [r2, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	6811      	ldr	r1, [r2, #0]
 8001a1e:	4a23      	ldr	r2, [pc, #140]	; (8001aac <vTaskIncrementTick+0xcc>)
 8001a20:	b911      	cbnz	r1, 8001a28 <vTaskIncrementTick+0x48>
				/* The new current delayed list is empty.  Set 
				xNextTaskUnblockTime to the maximum possible value so it is 
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until 
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e003      	b.n	8001a30 <vTaskIncrementTick+0x50>
			{
				/* The new current delayed list is not empty, get the value of 
				the item at the head of the delayed list.  This is the time at 
				which the task at the head of the delayed list should be removed 
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8001a32:	4c1e      	ldr	r4, [pc, #120]	; (8001aac <vTaskIncrementTick+0xcc>)
 8001a34:	682a      	ldr	r2, [r5, #0]
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d32b      	bcc.n	8001a94 <vTaskIncrementTick+0xb4>
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <vTaskIncrementTick+0xc0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	b912      	cbnz	r2, 8001a4a <vTaskIncrementTick+0x6a>
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295
 8001a48:	e006      	b.n	8001a58 <vTaskIncrementTick+0x78>
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	68de      	ldr	r6, [r3, #12]
 8001a50:	682a      	ldr	r2, [r5, #0]
 8001a52:	6873      	ldr	r3, [r6, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d201      	bcs.n	8001a5c <vTaskIncrementTick+0x7c>
 8001a58:	6023      	str	r3, [r4, #0]
 8001a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a5c:	1d37      	adds	r7, r6, #4
 8001a5e:	4638      	mov	r0, r7
 8001a60:	f7ff fbf8 	bl	8001254 <vListRemove>
 8001a64:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001a66:	b11b      	cbz	r3, 8001a70 <vTaskIncrementTick+0x90>
 8001a68:	f106 0018 	add.w	r0, r6, #24
 8001a6c:	f7ff fbf2 	bl	8001254 <vListRemove>
 8001a70:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <vTaskIncrementTick+0xd0>)
 8001a72:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001a74:	6811      	ldr	r1, [r2, #0]
 8001a76:	428b      	cmp	r3, r1
 8001a78:	bf88      	it	hi
 8001a7a:	6013      	strhi	r3, [r2, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <vTaskIncrementTick+0xd4>)
 8001a7e:	2014      	movs	r0, #20
 8001a80:	fb00 2003 	mla	r0, r0, r3, r2
 8001a84:	4639      	mov	r1, r7
 8001a86:	f7ff fbbf 	bl	8001208 <vListInsertEnd>
 8001a8a:	e7d7      	b.n	8001a3c <vTaskIncrementTick+0x5c>
	}
	else
	{
		++uxMissedTicks;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <vTaskIncrementTick+0xd8>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	3201      	adds	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000c8fc 	.word	0x2000c8fc
 8001a9c:	2000c91c 	.word	0x2000c91c
 8001aa0:	2000c864 	.word	0x2000c864
 8001aa4:	2000c920 	.word	0x2000c920
 8001aa8:	2000c900 	.word	0x2000c900
 8001aac:	20000020 	.word	0x20000020
 8001ab0:	2000c924 	.word	0x2000c924
 8001ab4:	2000c898 	.word	0x2000c898
 8001ab8:	2000c84c 	.word	0x2000c84c

08001abc <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001abc:	b570      	push	{r4, r5, r6, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001abe:	4c2b      	ldr	r4, [pc, #172]	; (8001b6c <xTaskResumeAll+0xb0>)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	b923      	cbnz	r3, 8001ace <xTaskResumeAll+0x12>
 8001ac4:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ac8:	f380 8811 	msr	BASEPRI, r0
 8001acc:	e7fe      	b.n	8001acc <xTaskResumeAll+0x10>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001ace:	f7ff fb45 	bl	800115c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001ad8:	6825      	ldr	r5, [r4, #0]
 8001ada:	2d00      	cmp	r5, #0
 8001adc:	d140      	bne.n	8001b60 <xTaskResumeAll+0xa4>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <xTaskResumeAll+0xb4>)
 8001ae0:	681c      	ldr	r4, [r3, #0]
 8001ae2:	b9f4      	cbnz	r4, 8001b22 <xTaskResumeAll+0x66>
 8001ae4:	e03d      	b.n	8001b62 <xTaskResumeAll+0xa6>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001aea:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
 8001aec:	f104 0018 	add.w	r0, r4, #24
 8001af0:	f7ff fbb0 	bl	8001254 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001af4:	4630      	mov	r0, r6
 8001af6:	f7ff fbad 	bl	8001254 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <xTaskResumeAll+0xb8>)
 8001afc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001afe:	6811      	ldr	r1, [r2, #0]
 8001b00:	428b      	cmp	r3, r1
 8001b02:	bf88      	it	hi
 8001b04:	6013      	strhi	r3, [r2, #0]
 8001b06:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <xTaskResumeAll+0xbc>)
 8001b08:	2014      	movs	r0, #20
 8001b0a:	fb00 2003 	mla	r0, r0, r3, r2
 8001b0e:	4631      	mov	r1, r6
 8001b10:	f7ff fb7a 	bl	8001208 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <xTaskResumeAll+0xc0>)
 8001b16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	bf28      	it	cs
 8001b20:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <xTaskResumeAll+0xc4>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d1dd      	bne.n	8001ae6 <xTaskResumeAll+0x2a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
 8001b2a:	4e16      	ldr	r6, [pc, #88]	; (8001b84 <xTaskResumeAll+0xc8>)
 8001b2c:	6834      	ldr	r4, [r6, #0]
 8001b2e:	b92c      	cbnz	r4, 8001b3c <xTaskResumeAll+0x80>
 8001b30:	e009      	b.n	8001b46 <xTaskResumeAll+0x8a>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
 8001b32:	f7ff ff55 	bl	80019e0 <vTaskIncrementTick>
						--uxMissedTicks;
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
 8001b3c:	6833      	ldr	r3, [r6, #0]
 8001b3e:	4c11      	ldr	r4, [pc, #68]	; (8001b84 <xTaskResumeAll+0xc8>)
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f6      	bne.n	8001b32 <xTaskResumeAll+0x76>
 8001b44:	e005      	b.n	8001b52 <xTaskResumeAll+0x96>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8001b46:	2d01      	cmp	r5, #1
 8001b48:	d003      	beq.n	8001b52 <xTaskResumeAll+0x96>
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <xTaskResumeAll+0xcc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <xTaskResumeAll+0xa6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <xTaskResumeAll+0xcc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8001b58:	f7ff faf8 	bl	800114c <vPortYieldFromISR>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
 8001b5c:	2401      	movs	r4, #1
 8001b5e:	e000      	b.n	8001b62 <xTaskResumeAll+0xa6>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8001b60:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8001b62:	f7ff fb07 	bl	8001174 <vPortExitCritical>

	return xAlreadyYielded;
}
 8001b66:	4620      	mov	r0, r4
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000c8fc 	.word	0x2000c8fc
 8001b70:	2000c944 	.word	0x2000c944
 8001b74:	2000c924 	.word	0x2000c924
 8001b78:	2000c898 	.word	0x2000c898
 8001b7c:	2000c904 	.word	0x2000c904
 8001b80:	2000c908 	.word	0x2000c908
 8001b84:	2000c84c 	.word	0x2000c84c
 8001b88:	2000c940 	.word	0x2000c940

08001b8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b8c:	b570      	push	{r4, r5, r6, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
 8001b8e:	4c13      	ldr	r4, [pc, #76]	; (8001bdc <prvIdleTask+0x50>)
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	b1cb      	cbz	r3, 8001bc8 <prvIdleTask+0x3c>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001b94:	4d12      	ldr	r5, [pc, #72]	; (8001be0 <prvIdleTask+0x54>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
		{
			vTaskSuspendAll();
 8001b96:	f7ff ff0f 	bl	80019b8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001b9a:	682e      	ldr	r6, [r5, #0]
			xTaskResumeAll();
 8001b9c:	f7ff ff8e 	bl	8001abc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001ba0:	b196      	cbz	r6, 8001bc8 <prvIdleTask+0x3c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001ba2:	f7ff fadb 	bl	800115c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8001ba6:	68eb      	ldr	r3, [r5, #12]
 8001ba8:	68dd      	ldr	r5, [r3, #12]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001baa:	1d28      	adds	r0, r5, #4
 8001bac:	f7ff fb52 	bl	8001254 <vListRemove>
					--uxCurrentNumberOfTasks;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <prvIdleTask+0x58>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	3a01      	subs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6023      	str	r3, [r4, #0]
				}
				taskEXIT_CRITICAL();
 8001bbe:	f7ff fad9 	bl	8001174 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f7ff fd82 	bl	80016cc <prvDeleteTCB>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <prvIdleTask+0x5c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d901      	bls.n	8001bd4 <prvIdleTask+0x48>
			{
				taskYIELD();
 8001bd0:	f7ff fabc 	bl	800114c <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001bd4:	f7fe fdfe 	bl	80007d4 <vApplicationIdleHook>
		}
		#endif
	}
 8001bd8:	e7d9      	b.n	8001b8e <prvIdleTask+0x2>
 8001bda:	bf00      	nop
 8001bdc:	2000c86c 	.word	0x2000c86c
 8001be0:	2000c870 	.word	0x2000c870
 8001be4:	2000c944 	.word	0x2000c944
 8001be8:	2000c898 	.word	0x2000c898

08001bec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8001bec:	b570      	push	{r4, r5, r6, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
 8001bee:	4604      	mov	r4, r0
 8001bf0:	b170      	cbz	r0, 8001c10 <vTaskDelay+0x24>
		{
			vTaskSuspendAll();
 8001bf2:	f7ff fee1 	bl	80019b8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <vTaskDelay+0x30>)
 8001bf8:	681d      	ldr	r5, [r3, #0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <vTaskDelay+0x34>)
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	3004      	adds	r0, #4
 8001c00:	f7ff fb28 	bl	8001254 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001c04:	1960      	adds	r0, r4, r5
 8001c06:	f7ff fd39 	bl	800167c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001c0a:	f7ff ff57 	bl	8001abc <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
 8001c0e:	b918      	cbnz	r0, 8001c18 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
		}
	}
 8001c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
		{
			portYIELD_WITHIN_API();
 8001c14:	f7ff ba9a 	b.w	800114c <vPortYieldFromISR>
 8001c18:	bd70      	pop	{r4, r5, r6, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000c91c 	.word	0x2000c91c
 8001c20:	2000c904 	.word	0x2000c904

08001c24 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c24:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <vTaskSwitchContext+0x90>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b11b      	cbz	r3, 8001c34 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <vTaskSwitchContext+0x94>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	bd38      	pop	{r3, r4, r5, pc}
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTempCounter;
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8001c34:	4c21      	ldr	r4, [pc, #132]	; (8001cbc <vTaskSwitchContext+0x98>)
 8001c36:	6822      	ldr	r2, [r4, #0]
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d804      	bhi.n	8001c4c <vTaskSwitchContext+0x28>
 8001c42:	6820      	ldr	r0, [r4, #0]
 8001c44:	6821      	ldr	r1, [r4, #0]
 8001c46:	3134      	adds	r1, #52	; 0x34
 8001c48:	f7fe fdca 	bl	80007e0 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	491c      	ldr	r1, [pc, #112]	; (8001cc0 <vTaskSwitchContext+0x9c>)
 8001c50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c52:	4d1a      	ldr	r5, [pc, #104]	; (8001cbc <vTaskSwitchContext+0x98>)
 8001c54:	2214      	movs	r2, #20
 8001c56:	f7fe fad7 	bl	8000208 <memcmp>
 8001c5a:	b178      	cbz	r0, 8001c7c <vTaskSwitchContext+0x58>
 8001c5c:	6828      	ldr	r0, [r5, #0]
 8001c5e:	6829      	ldr	r1, [r5, #0]
 8001c60:	3134      	adds	r1, #52	; 0x34
 8001c62:	f7fe fdbd 	bl	80007e0 <vApplicationStackOverflowHook>
 8001c66:	e009      	b.n	8001c7c <vTaskSwitchContext+0x58>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	b922      	cbnz	r2, 8001c76 <vTaskSwitchContext+0x52>
 8001c6c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001c70:	f380 8811 	msr	BASEPRI, r0
 8001c74:	e7fe      	b.n	8001c74 <vTaskSwitchContext+0x50>
			--uxTopReadyPriority;
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <vTaskSwitchContext+0xa0>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <vTaskSwitchContext+0xa4>)
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	2514      	movs	r5, #20
 8001c84:	4369      	muls	r1, r5
 8001c86:	5851      	ldr	r1, [r2, r1]
 8001c88:	2900      	cmp	r1, #0
 8001c8a:	d0ed      	beq.n	8001c68 <vTaskSwitchContext+0x44>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	4345      	muls	r5, r0
 8001c90:	1953      	adds	r3, r2, r5
 8001c92:	3508      	adds	r5, #8
 8001c94:	6859      	ldr	r1, [r3, #4]
 8001c96:	6849      	ldr	r1, [r1, #4]
 8001c98:	1955      	adds	r5, r2, r5
 8001c9a:	42a9      	cmp	r1, r5
 8001c9c:	6059      	str	r1, [r3, #4]
 8001c9e:	bf04      	itt	eq
 8001ca0:	6849      	ldreq	r1, [r1, #4]
 8001ca2:	6059      	streq	r1, [r3, #4]
 8001ca4:	2314      	movs	r3, #20
 8001ca6:	fb03 2200 	mla	r2, r3, r0, r2
 8001caa:	6853      	ldr	r3, [r2, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	6023      	str	r3, [r4, #0]
 8001cb0:	bd38      	pop	{r3, r4, r5, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000c8fc 	.word	0x2000c8fc
 8001cb8:	2000c940 	.word	0x2000c940
 8001cbc:	2000c904 	.word	0x2000c904
 8001cc0:	0800223c 	.word	0x0800223c
 8001cc4:	2000c924 	.word	0x2000c924
 8001cc8:	2000c898 	.word	0x2000c898

08001ccc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
 8001ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

		taskENTER_CRITICAL();
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
 8001cd0:	4d19      	ldr	r5, [pc, #100]	; (8001d38 <vTaskSuspend+0x6c>)
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
 8001cd2:	4604      	mov	r4, r0
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8001cd4:	f7ff fa42 	bl	800115c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
 8001cd8:	682b      	ldr	r3, [r5, #0]
 8001cda:	429c      	cmp	r4, r3
 8001cdc:	d000      	beq.n	8001ce0 <vTaskSuspend+0x14>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 8001cde:	b914      	cbnz	r4, 8001ce6 <vTaskSuspend+0x1a>
 8001ce0:	682e      	ldr	r6, [r5, #0]
 8001ce2:	2400      	movs	r4, #0
 8001ce4:	e000      	b.n	8001ce8 <vTaskSuspend+0x1c>
 8001ce6:	4626      	mov	r6, r4

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 8001ce8:	1d37      	adds	r7, r6, #4
 8001cea:	4638      	mov	r0, r7
 8001cec:	f7ff fab2 	bl	8001254 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
 8001cf0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001cf2:	b11b      	cbz	r3, 8001cfc <vTaskSuspend+0x30>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 8001cf4:	f106 0018 	add.w	r0, r6, #24
 8001cf8:	f7ff faac 	bl	8001254 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8001cfc:	4e0f      	ldr	r6, [pc, #60]	; (8001d3c <vTaskSuspend+0x70>)
 8001cfe:	4639      	mov	r1, r7
 8001d00:	4630      	mov	r0, r6
 8001d02:	f7ff fa81 	bl	8001208 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001d06:	f7ff fa35 	bl	8001174 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
 8001d0a:	2c00      	cmp	r4, #0
 8001d0c:	d112      	bne.n	8001d34 <vTaskSuspend+0x68>
		{
			if( xSchedulerRunning != pdFALSE )
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <vTaskSuspend+0x74>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b11b      	cbz	r3, 8001d1c <vTaskSuspend+0x50>
				{
					vTaskSwitchContext();
				}
			}
		}
	}
 8001d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if( ( void * ) pxTaskToSuspend == NULL )
		{
			if( xSchedulerRunning != pdFALSE )
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
 8001d18:	f7ff ba18 	b.w	800114c <vPortYieldFromISR>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) 
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <vTaskSuspend+0x78>)
 8001d1e:	6832      	ldr	r2, [r6, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d102      	bne.n	8001d2c <vTaskSuspend+0x60>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8001d26:	602c      	str	r4, [r5, #0]
 8001d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				{
					vTaskSwitchContext();
				}
			}
		}
	}
 8001d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 8001d30:	f7ff bf78 	b.w	8001c24 <vTaskSwitchContext>
 8001d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d38:	2000c904 	.word	0x2000c904
 8001d3c:	2000c850 	.word	0x2000c850
 8001d40:	2000c868 	.word	0x2000c868
 8001d44:	2000c944 	.word	0x2000c944

08001d48 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	460d      	mov	r5, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8001d4c:	b920      	cbnz	r0, 8001d58 <vTaskPlaceOnEventList+0x10>
 8001d4e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d52:	f380 8811 	msr	BASEPRI, r0
 8001d56:	e7fe      	b.n	8001d56 <vTaskPlaceOnEventList+0xe>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8001d58:	4c0c      	ldr	r4, [pc, #48]	; (8001d8c <vTaskPlaceOnEventList+0x44>)
 8001d5a:	6821      	ldr	r1, [r4, #0]
 8001d5c:	3118      	adds	r1, #24
 8001d5e:	f7ff fa60 	bl	8001222 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001d62:	6820      	ldr	r0, [r4, #0]
 8001d64:	3004      	adds	r0, #4
 8001d66:	f7ff fa75 	bl	8001254 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8001d6a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001d6e:	d106      	bne.n	8001d7e <vTaskPlaceOnEventList+0x36>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001d70:	6821      	ldr	r1, [r4, #0]
 8001d72:	4807      	ldr	r0, [pc, #28]	; (8001d90 <vTaskPlaceOnEventList+0x48>)
 8001d74:	3104      	adds	r1, #4
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8001d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001d7a:	f7ff ba45 	b.w	8001208 <vListInsertEnd>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <vTaskPlaceOnEventList+0x4c>)
 8001d80:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001d82:	1828      	adds	r0, r5, r0
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8001d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001d88:	f7ff bc78 	b.w	800167c <prvAddCurrentTaskToDelayedList>
 8001d8c:	2000c904 	.word	0x2000c904
 8001d90:	2000c850 	.word	0x2000c850
 8001d94:	2000c91c 	.word	0x2000c91c

08001d98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8001d9c:	b920      	cbnz	r0, 8001da8 <vTaskPlaceOnEventListRestricted+0x10>
 8001d9e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001da2:	f380 8811 	msr	BASEPRI, r0
 8001da6:	e7fe      	b.n	8001da6 <vTaskPlaceOnEventListRestricted+0xe>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8001da8:	4c07      	ldr	r4, [pc, #28]	; (8001dc8 <vTaskPlaceOnEventListRestricted+0x30>)
 8001daa:	6821      	ldr	r1, [r4, #0]
 8001dac:	3118      	adds	r1, #24
 8001dae:	f7ff fa2b 	bl	8001208 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001db2:	6820      	ldr	r0, [r4, #0]
 8001db4:	3004      	adds	r0, #4
 8001db6:	f7ff fa4d 	bl	8001254 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <vTaskPlaceOnEventListRestricted+0x34>)
 8001dbc:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001dbe:	1828      	adds	r0, r5, r0
	}
 8001dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001dc4:	f7ff bc5a 	b.w	800167c <prvAddCurrentTaskToDelayedList>
 8001dc8:	2000c904 	.word	0x2000c904
 8001dcc:	2000c91c 	.word	0x2000c91c

08001dd0 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8001dd0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001dd2:	68c3      	ldr	r3, [r0, #12]
 8001dd4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8001dd6:	b924      	cbnz	r4, 8001de2 <xTaskRemoveFromEventList+0x12>
 8001dd8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ddc:	f380 8811 	msr	BASEPRI, r0
 8001de0:	e7fe      	b.n	8001de0 <xTaskRemoveFromEventList+0x10>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001de2:	f104 0518 	add.w	r5, r4, #24
 8001de6:	4628      	mov	r0, r5
 8001de8:	f7ff fa34 	bl	8001254 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <xTaskRemoveFromEventList+0x5c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b973      	cbnz	r3, 8001e10 <xTaskRemoveFromEventList+0x40>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001df2:	1d25      	adds	r5, r4, #4
 8001df4:	4628      	mov	r0, r5
 8001df6:	f7ff fa2d 	bl	8001254 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8001dfa:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <xTaskRemoveFromEventList+0x60>)
 8001dfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dfe:	6811      	ldr	r1, [r2, #0]
 8001e00:	428b      	cmp	r3, r1
 8001e02:	bf88      	it	hi
 8001e04:	6013      	strhi	r3, [r2, #0]
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <xTaskRemoveFromEventList+0x64>)
 8001e08:	2014      	movs	r0, #20
 8001e0a:	fb00 2003 	mla	r0, r0, r3, r2
 8001e0e:	e000      	b.n	8001e12 <xTaskRemoveFromEventList+0x42>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <xTaskRemoveFromEventList+0x68>)
 8001e12:	4629      	mov	r1, r5
 8001e14:	f7ff f9f8 	bl	8001208 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <xTaskRemoveFromEventList+0x6c>)
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8001e1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e1c:	681b      	ldr	r3, [r3, #0]
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
 8001e20:	4298      	cmp	r0, r3
 8001e22:	bf34      	ite	cc
 8001e24:	2000      	movcc	r0, #0
 8001e26:	2001      	movcs	r0, #1
 8001e28:	bd38      	pop	{r3, r4, r5, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000c8fc 	.word	0x2000c8fc
 8001e30:	2000c924 	.word	0x2000c924
 8001e34:	2000c898 	.word	0x2000c898
 8001e38:	2000c908 	.word	0x2000c908
 8001e3c:	2000c904 	.word	0x2000c904

08001e40 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
 8001e40:	b920      	cbnz	r0, 8001e4c <vTaskSetTimeOutState+0xc>
 8001e42:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e46:	f380 8811 	msr	BASEPRI, r0
 8001e4a:	e7fe      	b.n	8001e4a <vTaskSetTimeOutState+0xa>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <vTaskSetTimeOutState+0x1c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001e52:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <vTaskSetTimeOutState+0x20>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6043      	str	r3, [r0, #4]
}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	2000c900 	.word	0x2000c900
 8001e60:	2000c91c 	.word	0x2000c91c

08001e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001e64:	b538      	push	{r3, r4, r5, lr}
 8001e66:	460c      	mov	r4, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8001e68:	4605      	mov	r5, r0
 8001e6a:	b920      	cbnz	r0, 8001e76 <xTaskCheckForTimeOut+0x12>
 8001e6c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e70:	f380 8811 	msr	BASEPRI, r0
 8001e74:	e7fe      	b.n	8001e74 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
 8001e76:	b921      	cbnz	r1, 8001e82 <xTaskCheckForTimeOut+0x1e>
 8001e78:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e7c:	f380 8811 	msr	BASEPRI, r0
 8001e80:	e7fe      	b.n	8001e80 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8001e82:	f7ff f96b 	bl	800115c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d016      	beq.n	8001ebc <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <xTaskCheckForTimeOut+0x68>)
 8001e90:	6811      	ldr	r1, [r2, #0]
 8001e92:	682a      	ldr	r2, [r5, #0]
 8001e94:	4291      	cmp	r1, r2
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <xTaskCheckForTimeOut+0x6c>)
 8001e98:	d003      	beq.n	8001ea2 <xTaskCheckForTimeOut+0x3e>
 8001e9a:	6810      	ldr	r0, [r2, #0]
 8001e9c:	6869      	ldr	r1, [r5, #4]
 8001e9e:	4288      	cmp	r0, r1
 8001ea0:	d20e      	bcs.n	8001ec0 <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8001ea2:	6811      	ldr	r1, [r2, #0]
 8001ea4:	686a      	ldr	r2, [r5, #4]
 8001ea6:	1a89      	subs	r1, r1, r2
 8001ea8:	4299      	cmp	r1, r3
 8001eaa:	d209      	bcs.n	8001ec0 <xTaskCheckForTimeOut+0x5c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8001eac:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <xTaskCheckForTimeOut+0x6c>)
 8001eae:	6809      	ldr	r1, [r1, #0]
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	18d3      	adds	r3, r2, r3
 8001eb4:	6023      	str	r3, [r4, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	f7ff ffc2 	bl	8001e40 <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 8001ebc:	2400      	movs	r4, #0
 8001ebe:	e000      	b.n	8001ec2 <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
 8001ec0:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
 8001ec2:	f7ff f957 	bl	8001174 <vPortExitCritical>

	return xReturn;
}
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	bd38      	pop	{r3, r4, r5, pc}
 8001eca:	bf00      	nop
 8001ecc:	2000c900 	.word	0x2000c900
 8001ed0:	2000c91c 	.word	0x2000c91c

08001ed4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
 8001ed4:	4b01      	ldr	r3, [pc, #4]	; (8001edc <vTaskMissedYield+0x8>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
}
 8001eda:	4770      	bx	lr
 8001edc:	2000c940 	.word	0x2000c940

08001ee0 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <xTaskGetSchedulerState+0x14>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	b128      	cbz	r0, 8001ef2 <xTaskGetSchedulerState+0x12>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <xTaskGetSchedulerState+0x18>)
 8001ee8:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001eea:	2800      	cmp	r0, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2002      	movne	r0, #2
 8001ef0:	2001      	moveq	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8001ef2:	4770      	bx	lr
 8001ef4:	2000c868 	.word	0x2000c868
 8001ef8:	2000c8fc 	.word	0x2000c8fc

08001efc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8001efc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8001efe:	4c0d      	ldr	r4, [pc, #52]	; (8001f34 <prvCheckForValidListAndQueue+0x38>)
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8001f00:	f7ff f92c 	bl	800115c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	b983      	cbnz	r3, 8001f2a <prvCheckForValidListAndQueue+0x2e>
		{
			vListInitialise( &xActiveTimerList1 );
 8001f08:	4e0b      	ldr	r6, [pc, #44]	; (8001f38 <prvCheckForValidListAndQueue+0x3c>)
			vListInitialise( &xActiveTimerList2 );
 8001f0a:	4d0c      	ldr	r5, [pc, #48]	; (8001f3c <prvCheckForValidListAndQueue+0x40>)
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8001f0c:	4630      	mov	r0, r6
 8001f0e:	f7ff f96d 	bl	80011ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8001f12:	4628      	mov	r0, r5
 8001f14:	f7ff f96a 	bl	80011ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <prvCheckForValidListAndQueue+0x44>)
 8001f1a:	601e      	str	r6, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <prvCheckForValidListAndQueue+0x48>)
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8001f1e:	2006      	movs	r0, #6
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
 8001f20:	601d      	str	r5, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8001f22:	210c      	movs	r1, #12
 8001f24:	f7ff fa10 	bl	8001348 <xQueueCreate>
 8001f28:	6020      	str	r0, [r4, #0]
		}
	}
	taskEXIT_CRITICAL();
}
 8001f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
 8001f2e:	f7ff b921 	b.w	8001174 <vPortExitCritical>
 8001f32:	bf00      	nop
 8001f34:	2000c978 	.word	0x2000c978
 8001f38:	2000c950 	.word	0x2000c950
 8001f3c:	2000c964 	.word	0x2000c964
 8001f40:	2000c94c 	.word	0x2000c94c
 8001f44:	2000c97c 	.word	0x2000c97c

08001f48 <prvInsertTimerInActiveList>:
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
	
	if( xNextExpiryTime <= xTimeNow )
 8001f48:	4291      	cmp	r1, r2
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8001f4a:	b510      	push	{r4, lr}
 8001f4c:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001f4e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001f50:	6100      	str	r0, [r0, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 8001f52:	d805      	bhi.n	8001f60 <prvInsertTimerInActiveList+0x18>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8001f54:	6981      	ldr	r1, [r0, #24]
 8001f56:	1ad2      	subs	r2, r2, r3
 8001f58:	428a      	cmp	r2, r1
 8001f5a:	d20c      	bcs.n	8001f76 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <prvInsertTimerInActiveList+0x38>)
 8001f5e:	e004      	b.n	8001f6a <prvInsertTimerInActiveList+0x22>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d201      	bcs.n	8001f68 <prvInsertTimerInActiveList+0x20>
 8001f64:	4299      	cmp	r1, r3
 8001f66:	d208      	bcs.n	8001f7a <prvInsertTimerInActiveList+0x32>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <prvInsertTimerInActiveList+0x3c>)
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	1d21      	adds	r1, r4, #4
 8001f6e:	f7ff f958 	bl	8001222 <vListInsert>
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8001f72:	2000      	movs	r0, #0
 8001f74:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001f76:	2001      	movs	r0, #1
 8001f78:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8001f7a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8001f7c:	bd10      	pop	{r4, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000c97c 	.word	0x2000c97c
 8001f84:	2000c94c 	.word	0x2000c94c

08001f88 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8001f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001f8a:	f7ff ffb7 	bl	8001efc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <xTimerCreateTimerTask+0x34>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b15b      	cbz	r3, 8001fac <xTimerCreateTimerTask+0x24>
	{
		xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, NULL);
 8001f94:	2303      	movs	r3, #3
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <xTimerCreateTimerTask+0x38>)
 8001f9a:	490a      	ldr	r1, [pc, #40]	; (8001fc4 <xTimerCreateTimerTask+0x3c>)
 8001f9c:	3b03      	subs	r3, #3
 8001f9e:	22c8      	movs	r2, #200	; 0xc8
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	9302      	str	r3, [sp, #8]
 8001fa4:	9303      	str	r3, [sp, #12]
 8001fa6:	f7ff fb9b 	bl	80016e0 <xTaskGenericCreate>
	}

	configASSERT( xReturn );
 8001faa:	b920      	cbnz	r0, 8001fb6 <xTimerCreateTimerTask+0x2e>
 8001fac:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001fb0:	f380 8811 	msr	BASEPRI, r0
 8001fb4:	e7fe      	b.n	8001fb4 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
 8001fb6:	b005      	add	sp, #20
 8001fb8:	bd00      	pop	{pc}
 8001fba:	bf00      	nop
 8001fbc:	2000c978 	.word	0x2000c978
 8001fc0:	080020b1 	.word	0x080020b1
 8001fc4:	08002255 	.word	0x08002255

08001fc8 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8001fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001fca:	4e0e      	ldr	r6, [pc, #56]	; (8002004 <xTimerGenericCommand+0x3c>)
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8001fcc:	4605      	mov	r5, r0
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001fce:	6830      	ldr	r0, [r6, #0]
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8001fd0:	461c      	mov	r4, r3
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001fd2:	b1a0      	cbz	r0, 8001ffe <xTimerGenericCommand+0x36>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001fd4:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
 8001fd6:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8001fd8:	9503      	str	r5, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
 8001fda:	b95b      	cbnz	r3, 8001ff4 <xTimerGenericCommand+0x2c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001fdc:	f7ff ff80 	bl	8001ee0 <xTaskGetSchedulerState>
 8001fe0:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8001fe2:	a901      	add	r1, sp, #4
 8001fe4:	6830      	ldr	r0, [r6, #0]
 8001fe6:	bf0c      	ite	eq
 8001fe8:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001fea:	4622      	movne	r2, r4
 8001fec:	4623      	mov	r3, r4
 8001fee:	f7ff f9dc 	bl	80013aa <xQueueGenericSend>
 8001ff2:	e004      	b.n	8001ffe <xTimerGenericCommand+0x36>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	a901      	add	r1, sp, #4
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f7ff fa58 	bl	80014ae <xQueueGenericSendFromISR>
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
}
 8001ffe:	b004      	add	sp, #16
 8002000:	bd70      	pop	{r4, r5, r6, pc}
 8002002:	bf00      	nop
 8002004:	2000c978 	.word	0x2000c978

08002008 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8002008:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
	
	if( xTimeNow < xLastTime )
 800200c:	4e25      	ldr	r6, [pc, #148]	; (80020a4 <prvSampleTimeNow+0x9c>)
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 800200e:	4605      	mov	r5, r0
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8002010:	f7ff fcda 	bl	80019c8 <xTaskGetTickCount>
	
	if( xTimeNow < xLastTime )
 8002014:	6833      	ldr	r3, [r6, #0]
 8002016:	4298      	cmp	r0, r3
static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8002018:	4604      	mov	r4, r0
	
	if( xTimeNow < xLastTime )
 800201a:	d23c      	bcs.n	8002096 <prvSampleTimeNow+0x8e>
 800201c:	e02d      	b.n	800207a <prvSampleTimeNow+0x72>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	6817      	ldr	r7, [r2, #0]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f8d3 800c 	ldr.w	r8, [r3, #12]
		vListRemove( &( pxTimer->xTimerListItem ) );
 8002028:	f108 0a04 	add.w	sl, r8, #4
 800202c:	4650      	mov	r0, sl
 800202e:	f7ff f911 	bl	8001254 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002032:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8002036:	4640      	mov	r0, r8
 8002038:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800203a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d11b      	bne.n	800207a <prvSampleTimeNow+0x72>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002042:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8002046:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 8002048:	42bb      	cmp	r3, r7
 800204a:	d909      	bls.n	8002060 <prvSampleTimeNow+0x58>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800204c:	f8c8 3004 	str.w	r3, [r8, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002050:	f8c8 8010 	str.w	r8, [r8, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002054:	f8d9 0000 	ldr.w	r0, [r9]
 8002058:	4651      	mov	r1, sl
 800205a:	f7ff f8e2 	bl	8001222 <vListInsert>
 800205e:	e00c      	b.n	800207a <prvSampleTimeNow+0x72>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002060:	2100      	movs	r1, #0
 8002062:	4640      	mov	r0, r8
 8002064:	463a      	mov	r2, r7
 8002066:	460b      	mov	r3, r1
 8002068:	9100      	str	r1, [sp, #0]
 800206a:	f7ff ffad 	bl	8001fc8 <xTimerGenericCommand>
				configASSERT( xResult );
 800206e:	b920      	cbnz	r0, 800207a <prvSampleTimeNow+0x72>
 8002070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002074:	f380 8811 	msr	BASEPRI, r0
 8002078:	e7fe      	b.n	8002078 <prvSampleTimeNow+0x70>
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800207a:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80020ac <prvSampleTimeNow+0xa4>
 800207e:	f8d9 3000 	ldr.w	r3, [r9]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2a00      	cmp	r2, #0
 8002086:	d1ca      	bne.n	800201e <prvSampleTimeNow+0x16>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <prvSampleTimeNow+0xa0>)
 800208a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800208c:	6013      	str	r3, [r2, #0]
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800208e:	f8c9 1000 	str.w	r1, [r9]
	xTimeNow = xTaskGetTickCount();
	
	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <prvSampleTimeNow+0x90>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002096:	2300      	movs	r3, #0
 8002098:	602b      	str	r3, [r5, #0]
	}
	
	xLastTime = xTimeNow;
	
	return xTimeNow;
}
 800209a:	4620      	mov	r0, r4
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}
	
	xLastTime = xTimeNow;
 800209c:	6034      	str	r4, [r6, #0]
	
	return xTimeNow;
}
 800209e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 80020a2:	bf00      	nop
 80020a4:	2000c980 	.word	0x2000c980
 80020a8:	2000c97c 	.word	0x2000c97c
 80020ac:	2000c94c 	.word	0x2000c94c

080020b0 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	b087      	sub	sp, #28
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80020b4:	4c4b      	ldr	r4, [pc, #300]	; (80021e4 <prvTimerTask+0x134>)
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	681e      	ldr	r6, [r3, #0]
 80020ba:	f1d6 0601 	rsbs	r6, r6, #1
 80020be:	bf38      	it	cc
 80020c0:	2600      	movcc	r6, #0
	if( *pxListWasEmpty == pdFALSE )
 80020c2:	b916      	cbnz	r6, 80020ca <prvTimerTask+0x1a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	681d      	ldr	r5, [r3, #0]
 80020c8:	e000      	b.n	80020cc <prvTimerTask+0x1c>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 80020ca:	2500      	movs	r5, #0
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80020cc:	f7ff fc74 	bl	80019b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80020d0:	a805      	add	r0, sp, #20
 80020d2:	f7ff ff99 	bl	8002008 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80020d6:	9b05      	ldr	r3, [sp, #20]
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80020d8:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d133      	bne.n	8002146 <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80020de:	2e00      	cmp	r6, #0
 80020e0:	d126      	bne.n	8002130 <prvTimerTask+0x80>
 80020e2:	4285      	cmp	r5, r0
 80020e4:	d824      	bhi.n	8002130 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
 80020e6:	f7ff fce9 	bl	8001abc <xTaskResumeAll>
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	68dc      	ldr	r4, [r3, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 80020f0:	1d20      	adds	r0, r4, #4
 80020f2:	f7ff f8af 	bl	8001254 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80020f6:	69e3      	ldr	r3, [r4, #28]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d115      	bne.n	8002128 <prvTimerTask+0x78>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80020fc:	69a1      	ldr	r1, [r4, #24]
 80020fe:	4620      	mov	r0, r4
 8002100:	1869      	adds	r1, r5, r1
 8002102:	463a      	mov	r2, r7
 8002104:	462b      	mov	r3, r5
 8002106:	f7ff ff1f 	bl	8001f48 <prvInsertTimerInActiveList>
 800210a:	2801      	cmp	r0, #1
 800210c:	d10c      	bne.n	8002128 <prvTimerTask+0x78>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 800210e:	4620      	mov	r0, r4
 8002110:	4631      	mov	r1, r6
 8002112:	462a      	mov	r2, r5
 8002114:	4633      	mov	r3, r6
 8002116:	9600      	str	r6, [sp, #0]
 8002118:	f7ff ff56 	bl	8001fc8 <xTimerGenericCommand>
			configASSERT( xResult );
 800211c:	b920      	cbnz	r0, 8002128 <prvTimerTask+0x78>
 800211e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002122:	f380 8811 	msr	BASEPRI, r0
 8002126:	e7fe      	b.n	8002126 <prvTimerTask+0x76>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800212a:	4620      	mov	r0, r4
 800212c:	4798      	blx	r3
 800212e:	e00c      	b.n	800214a <prvTimerTask+0x9a>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8002130:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <prvTimerTask+0x138>)
 8002132:	1be9      	subs	r1, r5, r7
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f7ff fa81 	bl	800163c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800213a:	f7ff fcbf 	bl	8001abc <xTaskResumeAll>
 800213e:	b920      	cbnz	r0, 800214a <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8002140:	f7ff f804 	bl	800114c <vPortYieldFromISR>
 8002144:	e001      	b.n	800214a <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 8002146:	f7ff fcb9 	bl	8001abc <xTaskResumeAll>
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800214a:	a805      	add	r0, sp, #20
 800214c:	f7ff ff5c 	bl	8002008 <prvSampleTimeNow>
 8002150:	4606      	mov	r6, r0
 8002152:	e03d      	b.n	80021d0 <prvTimerTask+0x120>

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
 8002154:	9c04      	ldr	r4, [sp, #16]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 8002156:	b124      	cbz	r4, 8002162 <prvTimerTask+0xb2>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002158:	6963      	ldr	r3, [r4, #20]
 800215a:	b113      	cbz	r3, 8002162 <prvTimerTask+0xb2>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 800215c:	1d20      	adds	r0, r4, #4
 800215e:	f7ff f879 	bl	8001254 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 8002162:	9d02      	ldr	r5, [sp, #8]
 8002164:	2d02      	cmp	r5, #2
 8002166:	d021      	beq.n	80021ac <prvTimerTask+0xfc>
 8002168:	2d03      	cmp	r5, #3
 800216a:	d02e      	beq.n	80021ca <prvTimerTask+0x11a>
 800216c:	2d00      	cmp	r5, #0
 800216e:	d12f      	bne.n	80021d0 <prvTimerTask+0x120>
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8002170:	9b03      	ldr	r3, [sp, #12]
 8002172:	69a1      	ldr	r1, [r4, #24]
 8002174:	4620      	mov	r0, r4
 8002176:	1859      	adds	r1, r3, r1
 8002178:	4632      	mov	r2, r6
 800217a:	f7ff fee5 	bl	8001f48 <prvInsertTimerInActiveList>
 800217e:	2801      	cmp	r0, #1
 8002180:	d126      	bne.n	80021d0 <prvTimerTask+0x120>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002184:	4620      	mov	r0, r4
 8002186:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002188:	69e3      	ldr	r3, [r4, #28]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d120      	bne.n	80021d0 <prvTimerTask+0x120>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800218e:	69a2      	ldr	r2, [r4, #24]
 8002190:	9b03      	ldr	r3, [sp, #12]
 8002192:	9500      	str	r5, [sp, #0]
 8002194:	18d2      	adds	r2, r2, r3
 8002196:	4620      	mov	r0, r4
 8002198:	4629      	mov	r1, r5
 800219a:	462b      	mov	r3, r5
 800219c:	f7ff ff14 	bl	8001fc8 <xTimerGenericCommand>
						configASSERT( xResult );
 80021a0:	b9b0      	cbnz	r0, 80021d0 <prvTimerTask+0x120>
 80021a2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80021a6:	f380 8811 	msr	BASEPRI, r0
 80021aa:	e7fe      	b.n	80021aa <prvTimerTask+0xfa>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 80021ac:	9903      	ldr	r1, [sp, #12]
 80021ae:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80021b0:	b921      	cbnz	r1, 80021bc <prvTimerTask+0x10c>
 80021b2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80021b6:	f380 8811 	msr	BASEPRI, r0
 80021ba:	e7fe      	b.n	80021ba <prvTimerTask+0x10a>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80021bc:	4620      	mov	r0, r4
 80021be:	1871      	adds	r1, r6, r1
 80021c0:	4632      	mov	r2, r6
 80021c2:	4633      	mov	r3, r6
 80021c4:	f7ff fec0 	bl	8001f48 <prvInsertTimerInActiveList>
 80021c8:	e002      	b.n	80021d0 <prvTimerTask+0x120>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7fe ff4e 	bl	800106c <vPortFree>

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <prvTimerTask+0x138>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	a902      	add	r1, sp, #8
 80021d8:	4613      	mov	r3, r2
 80021da:	f7ff f9a5 	bl	8001528 <xQueueGenericReceive>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d1b8      	bne.n	8002154 <prvTimerTask+0xa4>
 80021e2:	e767      	b.n	80020b4 <prvTimerTask+0x4>
 80021e4:	2000c94c 	.word	0x2000c94c
 80021e8:	2000c978 	.word	0x2000c978
 80021ec:	3344454c 	.word	0x3344454c
 80021f0:	44454c00 	.word	0x44454c00
 80021f4:	454c0034 	.word	0x454c0034
 80021f8:	4c003544 	.word	0x4c003544
 80021fc:	00364445 	.word	0x00364445
 8002200:	54495753 	.word	0x54495753
 8002204:	00004843 	.word	0x00004843

08002208 <LEDS>:
 8002208:	00000000 000003e8 00000001 00001388     ................
 8002218:	00000002 00002710 00000003 00004e20     .....'...... N..

08002228 <BUTTON_CLK>:
 8002228:	00000001                                ....

0800222c <BUTTON_PIN>:
 800222c:	00800001                                         ..

0800222e <GPIO_PIN>:
 800222e:	00400080 02000100                       ..@.....

08002236 <BUTTON_PORT_SOURCE>:
	...

08002237 <BUTTON_PIN_SOURCE>:
	...

08002238 <BUTTON_IRQn>:
 8002238:	00010006                                         ..

0800223a <BUTTON_EXTI_LINE>:
 800223a:	a5a50001                                         ..

0800223c <ucExpectedStackBytes.5767>:
 800223c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 800224c:	a5a5a5a5 454c4449 726d5400 63765320     ....IDLE.Tmr Svc
 800225c:	00000000                                ....

08002260 <_init>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr

0800226c <_fini>:
 800226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226e:	bf00      	nop
 8002270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002272:	bc08      	pop	{r3}
 8002274:	469e      	mov	lr, r3
 8002276:	4770      	bx	lr
